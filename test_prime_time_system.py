"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ Beast Lord Bot.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–£–Æ –ª–æ–≥–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –ø–æ –¥–Ω—è–º –∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
"""

import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from utils.prime_time_manager import PrimeTimeManager


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="INFO"
    )


def test_maintenance_periods():
    """–¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π (X:00-X:05)"""
    logger.info("\n=== –¢–ï–°–¢ –ü–ï–†–ò–û–î–û–í –û–ë–ù–û–í–õ–ï–ù–ò–Ø (X:00-X:05) ===")

    prime_manager = PrimeTimeManager()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞
    test_times = [
        (datetime(2024, 1, 1, 9, 0), True, "09:00 - –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
        (datetime(2024, 1, 1, 9, 2), True, "09:02 - –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
        (datetime(2024, 1, 1, 9, 4), True, "09:04 - –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
        (datetime(2024, 1, 1, 9, 5), False, "09:05 - –ù–ê–ß–ê–õ–û –ø—Ä–∞–π–º-—Ç–∞–π–º–∞"),
        (datetime(2024, 1, 1, 9, 10), False, "09:10 - –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞"),
        (datetime(2024, 1, 1, 9, 55), False, "09:55 - –∫–æ–Ω–µ—Ü –ø—Ä–∞–π–º-—Ç–∞–π–º–∞"),
        (datetime(2024, 1, 1, 9, 59), False, "09:59 - –ø–æ—á—Ç–∏ –Ω–æ–≤—ã–π —á–∞—Å"),
        (datetime(2024, 1, 1, 10, 0), True, "10:00 - –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
    ]

    for test_time, expected_maintenance, description in test_times:
        is_maintenance = prime_manager.is_maintenance_period(test_time)
        status = "‚úÖ" if is_maintenance == expected_maintenance else "‚ùå"

        logger.info(f"  {status} {description}: {is_maintenance} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_maintenance})")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–π–º-—Ç–∞–π–º –ù–ï –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if expected_maintenance:
            current_actions = prime_manager.get_current_prime_actions(test_time)
            if len(current_actions) == 0:
                logger.info(f"    ‚úÖ –ü—Ä–∞–π–º-—Ç–∞–π–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ù–ï –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            else:
                logger.warning(f"    ‚ùå –ü—Ä–∞–π–º-—Ç–∞–π–º –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ù–∞–π–¥–µ–Ω–æ {len(current_actions)} –¥–µ–π—Å—Ç–≤–∏–π")


def test_corrected_day_distribution():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –ø–æ –¥–Ω—è–º (00:05-23:05)"""
    logger.info("\n=== –¢–ï–°–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –î–ù–Ø–ú ===")

    prime_manager = PrimeTimeManager()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–º–µ–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

    for day_num in range(7):
        day_name = days[day_num]
        day_actions = prime_manager.get_prime_actions_for_day(day_num)

        if not day_actions:
            logger.warning(f"  ‚ùå {day_name}: –ù–ï–¢ –¥–µ–π—Å—Ç–≤–∏–π")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω
        min_time = min(action.hour * 60 + action.minute for action in day_actions)
        max_time = max(action.hour * 60 + action.minute for action in day_actions)

        min_hour, min_minute = min_time // 60, min_time % 60
        max_hour, max_minute = max_time // 60, max_time % 60

        # –û–∂–∏–¥–∞–µ–º —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 00:05, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ 23:05
        correct_range = min_time == 5 and max_time == 1385  # 23:05 = 23*60+5 = 1385

        status = "‚úÖ" if correct_range else "‚ùå"
        logger.info(f"  {status} {day_name}: {min_hour:02d}:{min_minute:02d} - {max_hour:02d}:{max_minute:02d}")
        logger.info(f"      –î–µ–π—Å—Ç–≤–∏–π: {len(day_actions)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        if day_actions:
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ 00:05
            has_midnight = any(a.hour == 0 and a.minute == 5 for a in day_actions)
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ 23:05
            has_late = any(a.hour == 23 and a.minute == 5 for a in day_actions)

            midnight_status = "‚úÖ" if has_midnight else "‚ùå"
            late_status = "‚úÖ" if has_late else "‚ùå"

            logger.info(f"      {midnight_status} –ï—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ 00:05")
            logger.info(f"      {late_status} –ï—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ 23:05")


def test_corrected_prime_time_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    logger.info("\n=== –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ê–ô–ú-–¢–ê–ô–ú–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===")

    prime_manager = PrimeTimeManager()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∏–∑ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û yaml (v4)
    test_times = [
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        (datetime(2024, 1, 1, 0, 5), True, "–ü–ù 00:05 - —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏, —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã–ª—É–ø/—É–ª—É—á—à –¥–∏–∫–æ–≥–æ"),
        (datetime(2024, 1, 1, 1, 5), True, "–ü–ù 01:05 - —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏, —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π"),
        (datetime(2024, 1, 1, 9, 5), True, "–ü–ù 09:05 - —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π, —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏, –≤—ã–ª—É–ø —Å–æ–ª–¥–∞—Ç"),
        (datetime(2024, 1, 1, 17, 5), True, "–ü–ù 17:05 - —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π, —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏, –≤—ã–ª—É–ø —Å–æ–ª–¥–∞—Ç"),
        (datetime(2024, 1, 1, 12, 0), False, "–ü–ù 12:00 - –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),

        # –í—Ç–æ—Ä–Ω–∏–∫ (–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        (datetime(2024, 1, 2, 1, 5), True, "–í–¢ 01:05 - —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π, —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏, –≤—ã–ª—É–ø —Å–æ–ª–¥–∞—Ç"),
        (datetime(2024, 1, 2, 6, 5), True, "–í–¢ 06:05 - —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π ‚≠ê, –≤—ã–ª—É–ø–ª–µ–Ω–∏–µ —Å–æ–ª–¥–∞—Ç, –∫–ª–µ—Ç–∫–∏"),
        (datetime(2024, 1, 2, 14, 5), True, "–í–¢ 14:05 - —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π ‚≠ê, –≤—ã–ª—É–ø–ª–µ–Ω–∏–µ —Å–æ–ª–¥–∞—Ç, –∫–ª–µ—Ç–∫–∏"),
        (datetime(2024, 1, 2, 8, 0), False, "–í–¢ 08:00 - –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),

        # –°—Ä–µ–¥–∞ (–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        (datetime(2024, 1, 3, 1, 5), True, "–°–† 01:05 - —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏, —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π ‚≠ê"),
        (datetime(2024, 1, 3, 12, 5), True, "–°–† 12:05 - —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏ üíñ, —É—Å–∫–æ—Ä –Ω–∞ —ç–≤–æ–ª—é—Ü–∏—é"),
        (datetime(2024, 1, 3, 20, 5), True, "–°–† 20:05 - —Å–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏ üíñ, —É—Å–∫–æ—Ä –Ω–∞ —ç–≤–æ–ª—é—Ü–∏—é"),
        (datetime(2024, 1, 3, 15, 0), False, "–°–† 15:00 - –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),

        # –ß–µ—Ç–≤–µ—Ä–≥ (–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        (datetime(2024, 1, 4, 4, 5), True, "–ß–¢ 04:05 - –º—É—Ç —Å–ø–æ—Ä—ã, —è–π—Ü–∞ üíñ, –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏"),
        (datetime(2024, 1, 4, 12, 5), True, "–ß–¢ 12:05 - –º—É—Ç —Å–ø–æ—Ä—ã, —è–π—Ü–∞ üíñ, –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏"),

        # –ü—è—Ç–Ω–∏—Ü–∞ (–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        (datetime(2024, 1, 5, 0, 5), True, "–ü–¢ 00:05 - –º—É—Ç —Å–ø–æ—Ä—ã, —è–π—Ü–∞ üíñ, –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏"),
        (datetime(2024, 1, 5, 17, 5), True, "–ü–¢ 17:05 - —Å–∏–ª–∞ –∑–¥–∞–Ω–∏–π ‚≠ê, –≤—ã–ª—É–ø–ª–µ–Ω–∏–µ —Å–æ–ª–¥–∞—Ç"),

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        (datetime(2024, 1, 1, 8, 30), False, "–ü–ù 08:30 - –ù–ï–¢ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞"),
        (datetime(2024, 1, 2, 11, 45), False, "–í–¢ 11:45 - –ù–ï–¢ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞"),
    ]

    for test_time, expected_active, description in test_times:
        current_actions = prime_manager.get_current_prime_actions(test_time)
        is_active = len(current_actions) > 0
        day_name = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'][test_time.weekday()]

        status = "‚úÖ" if is_active == expected_active else "‚ùå"
        logger.info(f"  {status} {description}")

        if is_active and current_actions:
            for action in current_actions:
                logger.info(f"    - {action.action_type}: {action.bonus_description}")
        elif expected_active and not is_active:
            logger.warning(f"    –û–∂–∏–¥–∞–ª—Å—è –ø—Ä–∞–π–º-—Ç–∞–π–º, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω!")


def test_next_prime_window_corrected():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞ —Å —É—á–µ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    logger.info("\n=== –¢–ï–°–¢ –ü–û–ò–°–ö–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –ü–†–ê–ô–ú-–¢–ê–ô–ú–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===")

    prime_manager = PrimeTimeManager()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –≤—Ä–µ–º–µ–Ω
    test_scenarios = [
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º - –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        (datetime(2024, 1, 1, 8, 30), ['building_power'], "–ü–ù 08:30 -> —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"),

        # –í—Ç–æ—Ä–Ω–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ - –∏—â–µ–º —Ä–µ—Å—É—Ä—Å—ã
        (datetime(2024, 1, 2, 0, 10), ['resource_bonus'], "–í–¢ 00:10 -> —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º —Ä–µ—Å—É—Ä—Å–æ–≤"),

        # –°—Ä–µ–¥–∞ –≤–µ—á–µ—Ä–æ–º - –∏—â–µ–º —ç–≤–æ–ª—é—Ü–∏—é
        (datetime(2024, 1, 3, 19, 0), ['evolution_bonus'], "–°–† 19:00 -> —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º —ç–≤–æ–ª—é—Ü–∏–∏"),

        # –ß–µ—Ç–≤–µ—Ä–≥ –Ω–æ—á—å—é - –∏—â–µ–º —Å–ø–µ—Ü—É—Å–ª—É–≥–∏
        (datetime(2024, 1, 4, 3, 30), ['special_services'], "–ß–¢ 03:30 -> —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º —Å–ø–µ—Ü—É—Å–ª—É–≥"),
    ]

    for start_time, action_types, description in test_scenarios:
        next_window = prime_manager.get_next_prime_window(action_types, start_time)

        if next_window:
            next_time, next_actions = next_window
            wait_hours = (next_time - start_time).total_seconds() / 3600
            day_name = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'][next_time.weekday()]

            logger.success(f"  ‚úÖ {description}")
            logger.info(f"    –°–ª–µ–¥—É—é—â–∏–π: {day_name} {next_time.strftime('%H:%M')} (—á–µ—Ä–µ–∑ {wait_hours:.1f}—á)")
            logger.info(f"    –î–µ–π—Å—Ç–≤–∏—è: {len(next_actions)}")
            for action in next_actions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"      - {action.action_type}")
        else:
            logger.warning(f"  ‚ùå {description} - –ù–ï –ù–ê–ô–î–ï–ù!")


def test_wait_logic_with_maintenance():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    logger.info("\n=== –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –û–ñ–ò–î–ê–ù–ò–Ø –° –ü–ï–†–ò–û–î–ê–ú–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===")

    prime_manager = PrimeTimeManager()

    test_scenarios = [
        # –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–∞–∂–µ –¥–æ –¥–∞–ª–µ–∫–æ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        (datetime(2024, 1, 1, 9, 2), ['building_power'], 2.0, "–ü–ù 09:02 (–ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"),

        # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –º–æ–∂–µ—Ç –Ω–µ —Å—Ç–æ–∏—Ç—å –∂–¥–∞—Ç—å
        (datetime(2024, 1, 1, 9, 6), ['building_power'], 2.0, "–ü–ù 09:06 (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"),

        # –ü–µ—Ä–µ–¥ –ø–µ—Ä–∏–æ–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å
        (datetime(2024, 1, 1, 8, 58), ['building_power'], 2.0, "–ü–ù 08:58 (–ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)"),

        # –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
        (datetime(2024, 1, 1, 15, 30), ['evolution_bonus'], 2.0, "–ü–ù 15:30 (–æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è)"),
    ]

    for test_time, action_types, max_wait, description in test_scenarios:
        is_maintenance = prime_manager.is_maintenance_period(test_time)
        should_wait, next_time = prime_manager.should_wait_for_prime_time(action_types, max_wait)

        maintenance_info = " [–ü–ï–†–ò–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø]" if is_maintenance else ""

        if should_wait and next_time:
            wait_hours = (next_time - test_time).total_seconds() / 3600
            logger.info(f"  üïê {description}{maintenance_info}: –ñ–î–ê–¢–¨ {wait_hours:.1f}—á –¥–æ {next_time.strftime('%H:%M')}")
        else:
            logger.info(f"  ‚ö° {description}{maintenance_info}: –ù–ï –∂–¥–∞—Ç—å, –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å")


def test_prime_time_system():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤"""
    logger.info("=== –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ê–ô–ú-–¢–ê–ô–ú–û–í ===")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
    logger.info("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PrimeTimeManager...")
    prime_manager = PrimeTimeManager()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    summary = prime_manager.get_status_summary()

    logger.info(f"–í—Å–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤: {summary['total_prime_times']}")
    logger.info(f"–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π: {summary['action_types']}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {summary['current_time']}")
    logger.info(f"–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {summary['is_maintenance_period']}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {summary['current_active']}")

    if summary['current_actions']:
        logger.info("–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–π–º-—Ç–∞–π–º—ã:")
        for action in summary['current_actions']:
            logger.info(f"  - {action}")

    # 3. –¢–µ—Å—Ç –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    logger.info("\n3. –¢–µ—Å—Ç –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...")

    test_action_types_priority = [
        'building_power',
        'evolution_bonus',
        'training_bonus',
        'resource_bonus',
        'special_services'
    ]

    for action_type in test_action_types_priority:
        bonus = prime_manager.get_priority_bonus_for_action(action_type)
        if bonus > 0:
            logger.success(f"  {action_type}: +{bonus} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–ê–ö–¢–ò–í–ï–ù)")
        else:
            logger.info(f"  {action_type}: +{bonus} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")

    # 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    logger.info("\n4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

    try:
        from utils.database import Database

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db = Database("data/test_prime_times_corrected.db")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–π–º-—Ç–∞–π–º—ã –≤ –ë–î
        if prime_manager.save_prime_times_to_database(test_db):
            logger.success("  ‚úÖ –ü—Ä–∞–π–º-—Ç–∞–π–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            with test_db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) as count FROM prime_times')
                result = cursor.fetchone()
                count = result['count'] if result else 0

                logger.info(f"  –í –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤")
        else:
            logger.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –≤ –ë–î")

    except ImportError:
        logger.warning("  –ú–æ–¥—É–ª—å database –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞")
    except Exception as e:
        logger.error(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ë–î: {e}")

    logger.success("\n=== –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –∫–æ–Ω—Ñ–∏–≥–∞
        config_path = Path("configs/prime_times.yaml")
        if not config_path.exists():
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ñ–∞–π–ª configs/prime_times.yaml –Ω–∞ –æ—Å–Ω–æ–≤–µ Prime Time_fixed_v4.txt")
            return 1

        logger.info("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–ê–ô–ú-–¢–ê–ô–ú–û–í (v4)")
        logger.info("–î–∞–Ω–Ω—ã–µ –∏–∑ Prime Time_fixed_v4.txt:")
        logger.info("  ‚úÖ –í—Ä–µ–º–µ–Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ –¥–Ω—è–º (00:05-23:05)")
        logger.info("  ‚úÖ –ü–µ—Ä–∏–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è X:00-X:05 —É—á—Ç–µ–Ω—ã")
        logger.info("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞")
        logger.info("  ‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        success = True

        # 1. –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        test_maintenance_periods()

        # 2. –¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
        test_corrected_day_distribution()

        # 3. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
        test_corrected_prime_time_detection()

        # 4. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        test_next_prime_window_corrected()

        # 5. –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        test_wait_logic_with_maintenance()

        # 6. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        if not test_prime_time_system():
            success = False

        if success:
            logger.success("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! (v4)")
            logger.info("üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´:")
            logger.info("   ‚úÖ –ü–µ—Ä–∏–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è X:00-X:05 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
            logger.info("   ‚úÖ –í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –¥–Ω—è–º")
            logger.info("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Prime Time_fixed_v4.txt")
            logger.info("   ‚úÖ –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            logger.info("   ‚úÖ –õ–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return 0
        else:
            logger.error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return 1

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return 1


if __name__ == "__main__":
    exit(main())