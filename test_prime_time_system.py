"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ Beast Lord Bot.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤.
"""

import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from utils.prime_time_manager import PrimeTimeManager


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="INFO"
    )


def test_prime_time_system():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤"""

    logger.info("=== –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ê–ô–ú-–¢–ê–ô–ú–û–í ===")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
    logger.info("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PrimeTimeManager...")
    prime_manager = PrimeTimeManager()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    summary = prime_manager.get_status_summary()

    logger.info(f"–í—Å–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤: {summary['total_prime_times']}")
    logger.info(f"–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π: {summary['action_types']}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {summary['current_active']}")

    if summary['current_actions']:
        logger.info("–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–π–º-—Ç–∞–π–º—ã:")
        for action in summary['current_actions']:
            logger.info(f"  - {action}")

    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
    logger.info("\n3. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    test_times = [
        datetime(2024, 1, 1, 9, 5),  # –ü–ù 09:05 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º
        datetime(2024, 1, 1, 12, 0),  # –ü–ù 12:00 - –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        datetime(2024, 1, 2, 14, 5),  # –í–¢ 14:05 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º
        datetime(2024, 1, 3, 20, 5),  # –°–† 20:05 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º
    ]

    for test_time in test_times:
        current_actions = prime_manager.get_current_prime_actions(test_time)
        day_name = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'][test_time.weekday()]

        if current_actions:
            logger.success(f"  {day_name} {test_time.strftime('%H:%M')} - –Ω–∞–π–¥–µ–Ω–æ {len(current_actions)} –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤:")
            for action in current_actions:
                logger.info(f"    - {action.action_type}: {action.bonus_description}")
        else:
            logger.info(f"  {day_name} {test_time.strftime('%H:%M')} - –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –Ω–µ—Ç")

    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
    logger.info("\n4. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞...")

    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    next_window = prime_manager.get_next_prime_window(['building_power'])

    if next_window:
        next_time, next_actions = next_window
        logger.success(f"  –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {next_time.strftime('%d.%m %H:%M')}")
        logger.info(f"  –î–µ–π—Å—Ç–≤–∏—è:")
        for action in next_actions:
            logger.info(f"    - {action.bonus_description}")
    else:
        logger.warning("  –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
    logger.info("\n5. –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–∞...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
    test_action_types = [
        ['building_power'],  # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
        ['evolution_bonus'],  # –≠–≤–æ–ª—é—Ü–∏—è
        ['training_bonus'],  # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        ['special_services']  # –°–ø–µ—Ü—É—Å–ª—É–≥–∏
    ]

    for action_types in test_action_types:
        should_wait, next_time = prime_manager.should_wait_for_prime_time(action_types, max_wait_hours=2.0)

        if should_wait and next_time:
            wait_hours = (next_time - datetime.now()).total_seconds() / 3600
            logger.info(f"  {action_types[0]}: –ñ–î–ê–¢–¨ {wait_hours:.1f}—á –¥–æ {next_time.strftime('%H:%M')}")
        else:
            logger.info(f"  {action_types[0]}: –ù–ï –∂–¥–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–µ–π—á–∞—Å")

    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –¥–ª—è –¥–Ω—è
    logger.info("\n6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è...")

    # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–¥–µ–Ω—å 0)
    monday_actions = prime_manager.get_prime_actions_for_day(0)
    logger.info(f"  –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: {len(monday_actions)} –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    for action in monday_actions[:5]:
        logger.info(f"    {action.hour:02d}:{action.minute:02d} - {action.action_type}")

    if len(monday_actions) > 5:
        logger.info(f"    ... –∏ –µ—â–µ {len(monday_actions) - 5}")

    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
    logger.info("\n7. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    is_active, active_actions = prime_manager.is_prime_time_active(['building_power', 'evolution_bonus'])

    if is_active:
        logger.success(f"  –ê–ö–¢–ò–í–ï–ù –ø—Ä–∞–π–º-—Ç–∞–π–º! –ù–∞–π–¥–µ–Ω–æ {len(active_actions)} –¥–µ–π—Å—Ç–≤–∏–π:")
        for action in active_actions:
            logger.info(f"    - {action}")
    else:
        logger.info("  –ü—Ä–∞–π–º-—Ç–∞–π–º –ù–ï –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å")

    # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    logger.info("\n8. –¢–µ—Å—Ç –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...")

    test_action_types_priority = [
        'building_power',
        'evolution_bonus',
        'training_bonus',
        'resource_bonus',
        'special_services'
    ]

    for action_type in test_action_types_priority:
        bonus = prime_manager.get_priority_bonus_for_action(action_type)
        if bonus > 0:
            logger.success(f"  {action_type}: +{bonus} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–ê–ö–¢–ò–í–ï–ù)")
        else:
            logger.info(f"  {action_type}: +{bonus} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")

    # 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\n9. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤...")

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç–∏–ø–∞–º
    action_counts = {}
    for action_type, actions in prime_manager.prime_times.items():
        action_counts[action_type] = len(actions)

    logger.info("  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π:")
    for action_type, count in sorted(action_counts.items(), key=lambda x: x[1], reverse=True):
        logger.info(f"    {action_type}: {count} –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤")

    # 10. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    logger.info("\n10. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

    try:
        from utils.database import Database

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db = Database("data/test_prime_times.db")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–π–º-—Ç–∞–π–º—ã –≤ –ë–î
        if prime_manager.save_prime_times_to_database(test_db):
            logger.success("  ‚úÖ –ü—Ä–∞–π–º-—Ç–∞–π–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            with test_db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) as count FROM prime_times')
                result = cursor.fetchone()
                count = result['count'] if result else 0

                logger.info(f"  –í –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤")
        else:
            logger.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –≤ –ë–î")

    except ImportError:
        logger.warning("  –ú–æ–¥—É–ª—å database –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞")
    except Exception as e:
        logger.error(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ë–î: {e}")

    logger.success("\n=== –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ê–ô–ú-–¢–ê–ô–ú–û–í –ó–ê–í–ï–†–®–ï–ù ===")
    logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {summary['total_prime_times']} –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤")
    logger.info(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(summary['action_types'])} —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π")
    logger.info(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info(f"   ‚úÖ –õ–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info(f"   ‚úÖ –ë–æ–Ω—É—Å—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è")
    logger.info(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")

    return True


def test_specific_scenarios():
    """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

    logger.info("\n=== –¢–ï–°–¢ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í ===")

    prime_manager = PrimeTimeManager()

    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    logger.info("\nüìå –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")

    monday_morning = datetime(2024, 1, 1, 8, 0)  # –ü–ù 08:00
    should_wait, next_time = prime_manager.should_wait_for_prime_time(
        ['building_power'], max_wait_hours=2.0
    )

    if should_wait and next_time:
        wait_minutes = (next_time - monday_morning).total_seconds() / 60
        logger.info(f"  üïê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_minutes:.0f} –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞")
        logger.info(f"  üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∞–π–º-—Ç–∞–π–º: {next_time.strftime('%H:%M')}")
    else:
        logger.info("  ‚ö° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å—Ç—Ä–æ–∏—Ç—å —Å–µ–π—á–∞—Å, –ø—Ä–∞–π–º-—Ç–∞–π–º –¥–∞–ª–µ–∫–æ")

    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é –≤ —Å—Ä–µ–¥—É
    logger.info("\nüìå –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –≤ —Å—Ä–µ–¥—É")

    wednesday_evening = datetime(2024, 1, 3, 19, 30)  # –°–† 19:30
    evolution_actions = prime_manager.get_next_prime_window(['evolution_bonus'], wednesday_evening)

    if evolution_actions:
        next_time, actions = evolution_actions
        wait_minutes = (next_time - wednesday_evening).total_seconds() / 60
        logger.info(f"  üïê –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {wait_minutes:.0f} –º–∏–Ω—É—Ç")
        logger.info(f"  üìÖ –í—Ä–µ–º—è: {next_time.strftime('%H:%M')}")
        logger.info(f"  üéØ –ë–æ–Ω—É—Å—ã: {actions[0].bonus_description}")

    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º
    logger.info("\nüìå –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–π–º-—Ç–∞–π–º—ã –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º")

    friday_evening = datetime(2024, 1, 5, 17, 5)  # –ü–¢ 17:05
    current_actions = prime_manager.get_current_prime_actions(friday_evening)

    if current_actions:
        logger.success(f"  üéâ –ê–∫—Ç–∏–≤–Ω–æ {len(current_actions)} –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤!")
        for action in current_actions:
            bonus = prime_manager.get_priority_bonus_for_action(action.action_type)
            logger.info(f"    - {action.action_type}: +{bonus} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            logger.info(f"      {action.bonus_description}")
    else:
        logger.info("  üòê –ü—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")

    logger.success("\n=== –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ ===")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        config_path = Path("configs/prime_times.yaml")
        if not config_path.exists():
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª configs/prime_times.yaml –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞")
            return 1

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        if test_prime_time_system():
            logger.success("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! üéâ")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            test_specific_scenarios()

            logger.success("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéØ")
            return 0
        else:
            logger.error("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return 1

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return 1


if __name__ == "__main__":
    exit(main())