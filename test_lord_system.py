"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ—Ä–¥–∞.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Ä–∞–±–æ—Ç—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from utils.database import Database


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="INFO"
    )


def test_lord_requirements_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ª–æ—Ä–¥–∞"""

    logger.info("=== –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –¢–†–ï–ë–û–í–ê–ù–ò–ô –õ–û–†–î–ê ===")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db = Database("data/test_beast_lord.db")

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    logger.info("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ building_chains.yaml...")
    if db.load_lord_requirements_from_config():
        logger.success("‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        return False

    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞
    logger.info("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
    emulator_id = db.sync_emulator(
        emulator_index=0,
        emulator_name="Test Emulator",
        enabled=True,
        notes="–¢–µ—Å—Ç–æ–≤—ã–π —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    )
    logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–º—É–ª—è—Ç–æ—Ä —Å ID: {emulator_id}")

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    logger.info("\n3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...")
    if db.init_emulator_from_config(emulator_id):
        logger.success("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        return False

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ—Ä–¥–∞ 11
    logger.info("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ª–æ—Ä–¥–∞ 11...")
    requirements = db.get_lord_requirements(11)

    if requirements:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ—Ä–¥–∞ 11:")
        for category, items in requirements.items():
            logger.info(f"  {category.upper()}:")
            for name, level in items.items():
                logger.info(f"    - {name}: {level}")
    else:
        logger.warning("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ—Ä–¥–∞ 11 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    logger.info("\n5. –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞...")

    # –£–ª—É—á—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–¥–∞–Ω–∏–π
    test_buildings = [
        ("—É–ª–µ–π", 8),
        ("—Ñ–µ—Ä–º–∞_–≥—Ä—É–Ω—Ç–∞", 10),
        ("—Å–∫–ª–∞–¥_–ø–µ—Å–∫–∞", 7),
        ("–≥–æ–ª–æ–≤–æ_–≤—Å–µ—è–¥–Ω—ã—Ö", 9)
    ]

    for building_name, level in test_buildings:
        db.update_building_progress(emulator_id, building_name, current_level=level)
        logger.info(f"  - {building_name}: —É—Ä–æ–≤–µ–Ω—å {level}")

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞
    logger.info("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞ 11...")
    ready, missing = db.check_lord_upgrade_readiness(emulator_id, 11)

    if ready:
        logger.success("‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞ –¥–æ 11 —É—Ä–æ–≤–Ω—è!")
    else:
        logger.warning("‚ùå –ù–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞ 11")
        logger.info("–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
        for category, items in missing.items():
            if items:
                logger.info(f"  {category.upper()}:")
                for item in items:
                    logger.info(f"    - {item}")

    # 7. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    logger.info("\n7. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    missing_detailed = db.get_missing_requirements(emulator_id, 11)

    for category, items in missing_detailed.items():
        if items:
            logger.info(f"{category.upper()} (–Ω–µ–¥–æ—Å—Ç–∞–µ—Ç {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
            for item in items:
                logger.info(f"  - {item['name']}: {item['current_level']}/{item['required_level']} "
                            f"(–Ω—É–∂–Ω–æ +{item['levels_needed']})")

    # 8. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞
    logger.info("\n8. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞...")
    next_building = db.get_next_building_to_upgrade(emulator_id, 10)  # –¢–µ–∫—É—â–∏–π –ª–æ—Ä–¥ 10

    if next_building:
        logger.success(f"‚úÖ –°–ª–µ–¥—É—é—â–µ–µ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞: {next_building['name']}")
        logger.info(f"  –¢–∏–ø: {next_building['type']}")
        logger.info(f"  –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {next_building['current_level']}")
        logger.info(f"  –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {next_building['target_level']}")
        logger.info(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: {next_building['final_target']}")
        logger.info(f"  –î–ª—è –ª–æ—Ä–¥–∞: {next_building['lord_level']}")
    else:
        logger.info("–ù–µ—Ç –∑–¥–∞–Ω–∏–π/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞")

    # 9. –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ª–æ—Ä–¥–∞
    logger.info("\n9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è –ª–æ—Ä–¥–∞ 11...")
    if db.update_building_targets_for_lord_level(emulator_id, 11):
        logger.success("‚úÖ –¶–µ–ª–∏ –∑–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    if db.update_research_targets_for_lord_level(emulator_id, 11):
        logger.success("‚úÖ –¶–µ–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    # 10. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ª–æ—Ä–¥–∞ 11
    logger.info("\n10. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ª–æ—Ä–¥–∞ 11...")
    progress = db.get_building_progress_for_lord(emulator_id, 11)

    if progress:
        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–¥–∞–Ω–∏–π –¥–ª—è –ª–æ—Ä–¥–∞ 11:")
        logger.info(f"  –í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π: {progress['total_buildings']}")
        logger.info(f"  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {progress['completed_buildings']}")
        logger.info(f"  –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {progress['buildings_in_progress']}")
        logger.info(f"  –ì–æ—Ç–æ–≤–æ –∫ –∞–ø–≥—Ä–µ–π–¥—É: {progress['buildings_ready']}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        logger.info("  –î–µ—Ç–∞–ª–∏ (–ø–µ—Ä–≤—ã–µ 5 –∑–¥–∞–Ω–∏–π):")
        for building in progress['buildings_details'][:5]:
            status_icon = {"completed": "‚úÖ", "in_progress": "üîÑ", "ready": "‚è≥", "not_initialized": "‚ùå"}
            icon = status_icon.get(building['status'], "‚ùì")
            logger.info(f"    {icon} {building['building_name']}: "
                        f"{building.get('current_level', 0)}/{building['required_level']}")

    # 11. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
    logger.info("\n11. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    stats = db.get_database_stats()
    for table, count in stats.items():
        logger.info(f"  {table}: {count} –∑–∞–ø–∏—Å–µ–π")

    logger.success("\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        config_path = Path("configs/building_chains.yaml")
        if not config_path.exists():
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª configs/building_chains.yaml –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞")
            return 1

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        if test_lord_requirements_system():
            logger.success("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ")
            return 0
        else:
            logger.error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return 1

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())