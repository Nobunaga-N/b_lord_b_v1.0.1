"""
–≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

from datetime import datetime, timedelta
from rich.layout import Layout
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from loguru import logger

from tui.base_screen import BaseScreen


class StatusScreen(BaseScreen):
    """–≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã"""

    def __init__(self, app):
        super().__init__(app)
        self.start_time = None

    def activate(self):
        """–ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞"""
        status = self.app.orchestrator.get_processing_status()
        if status.get('processor_running') and self.start_time is None:
            self.start_time = datetime.now()

    def render(self) -> Layout:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        layout = Layout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_panel = Panel(
            Text("–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã", justify="center", style="bold cyan"),
            style="cyan"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = self.app.orchestrator.get_processing_status()
        queue_status = self.app.orchestrator.get_queue_status()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
        main_status_text = Text()

        if status.get('processor_running'):
            main_status_text.append("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ", style="white")
            main_status_text.append("üü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n\n", style="bold green")

            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            if self.start_time:
                uptime = datetime.now() - self.start_time
                hours, remainder = divmod(int(uptime.total_seconds()), 3600)
                minutes, seconds = divmod(remainder, 60)
                main_status_text.append(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours:02d}:{minutes:02d}:{seconds:02d}\n", style="cyan")
        else:
            main_status_text.append("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ", style="white")
            main_status_text.append("‚ö™ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n", style="bold")
            self.start_time = None

        main_status_text.append(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {status.get('total_processed', 0)}\n", style="green")
        main_status_text.append(f"–û—à–∏–±–æ–∫: {status.get('total_errors', 0)}\n",
                                style="red" if status.get('total_errors', 0) > 0 else "white")
        main_status_text.append(
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {status.get('active_slots', 0)}/{status.get('max_concurrent', 0)}\n")

        main_status_panel = Panel(
            main_status_text,
            title="[cyan]–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è[/cyan]",
            border_style="cyan"
        )

        # –û—á–µ—Ä–µ–¥—å –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if status.get('processor_running'):
            # –¢–∞–±–ª–∏—Ü–∞ –æ—á–µ—Ä–µ–¥–∏
            queue_table = Table(show_header=True, box=None)
            queue_table.add_column("–≠–º—É–ª—è—Ç–æ—Ä", style="cyan")
            queue_table.add_column("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", style="yellow")

            priorities = queue_status.get('priorities', [])
            if priorities:
                for priority in priorities[:5]:  # –¢–æ–ø-5
                    emu_index = priority.emulator_index if hasattr(priority, 'emulator_index') else 'N/A'
                    total_priority = priority.total_priority if hasattr(priority, 'total_priority') else 0
                    queue_table.add_row(
                        f"–≠–º—É–ª—è—Ç–æ—Ä {emu_index}",
                        f"{total_priority:.2f}"
                    )
            else:
                queue_table.add_row("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", "-")

            queue_panel = Panel(
                queue_table,
                title="[cyan]–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ø-5)[/cyan]",
                border_style="cyan"
            )

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (placeholder - –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–≥–∞–º–∏)
            actions_text = Text()
            actions_text.append("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n", style="dim")
            actions_text.append("‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∏–∂–µ\n", style="dim")
            actions_text.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n", style="dim")

            actions_panel = Panel(
                actions_text,
                title="[cyan]–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å[/cyan]",
                border_style="cyan"
            )

            # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            details_layout = Layout()
            details_layout.split_row(
                Layout(queue_panel),
                Layout(actions_panel)
            )
        else:
            details_layout = Layout(
                Panel(
                    Text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.", style="dim"),
                    border_style="cyan"
                )
            )

        # –ü–∞–Ω–µ–ª—å –ø–æ–º–æ—â–∏
        help_table = Table(show_header=False, box=None, padding=(0, 2))
        help_table.add_column("Key", style="cyan bold", width=10)
        help_table.add_column("Action", style="white")

        help_table.add_row("[R]", "–û–±–Ω–æ–≤–∏—Ç—å")
        help_table.add_row("[ESC]", "–ù–∞–∑–∞–¥")

        help_panel = Panel(
            help_table,
            title="[cyan]–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ[/cyan]",
            border_style="cyan"
        )

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        layout.split_column(
            Layout(title_panel, size=3),
            Layout(main_status_panel),
            Layout(details_layout),
            Layout(help_panel, size=6)
        )

        return layout

    def handle_key(self, key: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        key = key.lower()

        if key == 'escape':
            self.app.switch_screen('main')
            return True
        elif key == 'r':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            return True

        return False