"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TUI
"""

import sys
import time
from pathlib import Path
from typing import Dict, Optional
import yaml
from rich.console import Console
from rich.live import Live
from loguru import logger

from tui.base_screen import BaseScreen
from tui.main_screen import MainScreen
from tui.emulators_screen import EmulatorsScreen
from tui.settings_screen import SettingsScreen
from tui.status_screen import StatusScreen
from orchestrator import get_orchestrator


class BotTUIApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TUI"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.console = Console()
        self.orchestrator = get_orchestrator()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_path = Path("configs/tui_config.yaml")
        self.config = self._load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤
        self.screens: Dict[str, BaseScreen] = {
            'main': MainScreen(self),
            'emulators': EmulatorsScreen(self),
            'settings': SettingsScreen(self),
            'status': StatusScreen(self),
        }

        self.current_screen_name = 'main'
        self.running = False

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TUI"""
        default_config = {
            'max_concurrent_emulators': 5,
            'theme': 'default',
            'log_level': 'INFO',
            'auto_refresh_interval': 5
        }

        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
                    return {**default_config, **config.get('tui', {})}
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TUI: {e}")
                return default_config
        else:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            self._save_default_config(default_config)
            return default_config

    def _save_default_config(self, config: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_path.parent.mkdir(parents=True, exist_ok=True)
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                yaml.dump({'tui': config}, f, allow_unicode=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TUI: {self.config_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                yaml.dump({'tui': self.config}, f, allow_unicode=True)
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TUI —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def switch_screen(self, screen_name: str):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω

        Args:
            screen_name: –ò–º—è —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        """
        if screen_name in self.screens:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            self.screens[self.current_screen_name].deactivate()

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
            self.current_screen_name = screen_name
            self.screens[screen_name].activate()

            logger.debug(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω: {screen_name}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.running = True

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TUI
        # –£–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª
        logger.remove()
        log_path = Path("data/logs/tui.log")
        log_path.parent.mkdir(parents=True, exist_ok=True)
        logger.add(
            log_path,
            rotation="1 day",
            retention="7 days",
            level=self.config.get('log_level', 'INFO')
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∏–∂–µ TUI
        logger.add(
            sys.stdout,
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
            level="INFO",
            colorize=True
        )

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        try:
            with Live(
                    self.screens[self.current_screen_name].render(),
                    console=self.console,
                    refresh_per_second=4,
                    screen=False  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –Ω–∏–∂–µ
            ) as live:

                while self.running:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    if self.console.is_terminal:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        try:
                            current_screen = self.screens[self.current_screen_name]
                            live.update(current_screen.render())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {e}")

                        # –ß–∏—Ç–∞–µ–º –∫–ª–∞–≤–∏—à—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        try:
                            import msvcrt
                            if msvcrt.kbhit():
                                key = msvcrt.getch().decode('utf-8', errors='ignore')

                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
                                if key == '\xe0':  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                                    key = msvcrt.getch().decode('utf-8', errors='ignore')
                                    if key == 'H':
                                        key = 'up'
                                    elif key == 'P':
                                        key = 'down'
                                elif key == '\x1b':  # ESC
                                    key = 'escape'
                                elif key == '\r':  # Enter
                                    key = 'enter'
                                elif key == ' ':  # Space
                                    key = ' '
                                elif key == '\x08':  # Backspace
                                    key = 'backspace'

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à—É
                                result = current_screen.handle_key(key)
                                if result is False and key.lower() == 'q' and self.current_screen_name == 'main':
                                    self.running = False
                                    logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                                    break
                        except ImportError:
                            # Unix-—Å–∏—Å—Ç–µ–º—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                            import select
                            if select.select([sys.stdin], [], [], 0.1)[0]:
                                key = sys.stdin.read(1)
                                current_screen.handle_key(key)

                    time.sleep(0.1)

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TUI: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            if self.orchestrator.get_processing_status().get('processor_running'):
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                self.orchestrator.stop_processing()

            self.running = False
            logger.info("TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")