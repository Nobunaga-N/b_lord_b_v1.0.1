"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TUI —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª—å—é –ª–æ–≥–æ–≤
"""

import sys
import time
from pathlib import Path
from typing import Dict, Optional, List
from collections import deque
from datetime import datetime
import yaml
from rich.console import Console
from rich.live import Live
from rich.layout import Layout
from rich.panel import Panel
from rich.text import Text
from loguru import logger

from tui.base_screen import BaseScreen
from tui.main_screen import MainScreen
from tui.emulators_screen import EmulatorsScreen
from tui.settings_screen import SettingsScreen
from tui.status_screen import StatusScreen
from orchestrator import get_orchestrator


class LogBuffer:
    """–ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""

    def __init__(self, max_lines: int = 15):
        self.max_lines = max_lines
        self.logs = deque(maxlen=max_lines)

    def add(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –±—É—Ñ–µ—Ä"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
        color_map = {
            "DEBUG": "dim",
            "INFO": "white",
            "SUCCESS": "green",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "bold red"
        }
        color = color_map.get(level, "white")

        self.logs.append({
            'timestamp': timestamp,
            'level': level,
            'message': message,
            'color': color
        })

    def get_logs_panel(self) -> Panel:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–Ω–µ–ª—å —Å –ª–æ–≥–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.logs:
            content = Text("–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...", style="dim")
        else:
            content = Text()
            for log in self.logs:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥
                content.append(f"[{log['timestamp']}] ", style="cyan")
                content.append(f"{log['level']:<8} ", style=log['color'])
                content.append(f"| {log['message']}\n", style=log['color'])

        return Panel(
            content,
            title="[cyan]üìã –õ–æ–≥–∏[/cyan]",
            border_style="cyan",
            height=10  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤
        )


class BotTUIApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TUI —Å –ø–∞–Ω–µ–ª—å—é –ª–æ–≥–æ–≤"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.console = Console()
        self.orchestrator = get_orchestrator()

        # –ë—É—Ñ–µ—Ä –ª–æ–≥–æ–≤
        self.log_buffer = LogBuffer(max_lines=15)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_path = Path("configs/tui_config.yaml")
        self.config = self._load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤
        self.screens: Dict[str, BaseScreen] = {
            'main': MainScreen(self),
            'emulators': EmulatorsScreen(self),
            'settings': SettingsScreen(self),
            'status': StatusScreen(self),
        }

        self.current_screen_name = 'main'
        self.running = False

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TUI"""
        default_config = {
            'max_concurrent_emulators': 5,
            'theme': 'default',
            'log_level': 'INFO',
            'auto_refresh_interval': 5
        }

        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    return {**default_config, **config.get('tui', {})}
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TUI: {e}")
                return default_config
        else:
            self._save_default_config()
            return default_config

    def _save_default_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            'tui': {
                'max_concurrent_emulators': 5,
                'theme': 'default',
                'log_level': 'INFO',
                'auto_refresh_interval': 5
            }
        }

        self.config_path.parent.mkdir(parents=True, exist_ok=True)
        with open(self.config_path, 'w', encoding='utf-8') as f:
            yaml.dump(default_config, f, allow_unicode=True)

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_data = {
                'tui': self.config
            }
            with open(self.config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config_data, f, allow_unicode=True)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def switch_screen(self, screen_name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏"""
        if screen_name in self.screens:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            self.screens[self.current_screen_name].deactivate()

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
            self.current_screen_name = screen_name

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
            self.screens[screen_name].activate()

            self.log_buffer.add(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: {screen_name}", "DEBUG")

    def render_with_logs(self) -> Layout:
        """–†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å –ø–∞–Ω–µ–ª—å—é –ª–æ–≥–æ–≤ –≤–Ω–∏–∑—É"""
        main_layout = Layout()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        screen_layout = self.screens[self.current_screen_name].render()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        logs_panel = self.log_buffer.get_logs_panel()

        # –ö–æ–º–ø–æ–Ω—É–µ–º: —ç–∫—Ä–∞–Ω —Å–≤–µ—Ä—Ö—É (80%), –ª–æ–≥–∏ —Å–Ω–∏–∑—É (20%)
        main_layout.split_column(
            Layout(screen_layout, ratio=4),
            Layout(logs_panel, size=10)
        )

        return main_layout

    def _get_key(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ —á—Ç–µ–Ω–∏–µ)"""
        import select

        if sys.platform == 'win32':
            import msvcrt
            if msvcrt.kbhit():
                ch = msvcrt.getch()
                if ch in (b'\x00', b'\xe0'):
                    ch2 = msvcrt.getch()
                    arrow_map = {b'H': 'up', b'P': 'down', b'K': 'left', b'M': 'right'}
                    return arrow_map.get(ch2, None)
                try:
                    key = ch.decode('utf-8')
                    if key == '\r':
                        return 'enter'
                    elif key == '\x1b':
                        return 'escape'
                    elif key == '\x08':
                        return 'backspace'
                    return key
                except:
                    return None
            return None
        else:
            import termios
            import tty

            if not select.select([sys.stdin], [], [], 0)[0]:
                return None

            try:
                old_settings = termios.tcgetattr(sys.stdin)
                try:
                    tty.setraw(sys.stdin.fileno())
                    ch = sys.stdin.read(1)

                    if ch == '\x1b':
                        ch2 = sys.stdin.read(1)
                        if ch2 == '[':
                            ch3 = sys.stdin.read(1)
                            key_map = {'A': 'up', 'B': 'down', 'C': 'right', 'D': 'left'}
                            return key_map.get(ch3, 'escape')
                        return 'escape'
                    elif ch == '\r' or ch == '\n':
                        return 'enter'
                    elif ch == ' ':
                        return ' '
                    elif ch == '\x7f':
                        return 'backspace'
                    else:
                        return ch
                finally:
                    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
                return None

        return None

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –¥–ª—è TUI"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.remove()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        log_path = Path("data/logs/tui.log")
        log_path.parent.mkdir(parents=True, exist_ok=True)
        logger.add(
            log_path,
            rotation="1 day",
            retention="7 days",
            level=self.config.get('log_level', 'INFO'),
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è TUI –±—É—Ñ–µ—Ä–∞
        def tui_sink(message):
            """–ö–∞—Å—Ç–æ–º–Ω—ã–π sink –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤ –≤ TUI –±—É—Ñ–µ—Ä"""
            record = message.record
            level = record["level"].name
            msg = record["message"]
            self.log_buffer.add(msg, level)

        logger.add(
            tui_sink,
            level="INFO",
            format="{message}"
        )

        self.log_buffer.add("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è TUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "SUCCESS")

    def run(self):
        """–ó–∞–ø—É—Å–∫ TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.running = True

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_logging()

        logger.info("=" * 60)
        logger.info("Beast Lord Bot - TUI Interface v2.1")
        logger.info("=" * 60)

        try:
            with Live(
                self.render_with_logs(),
                console=self.console,
                refresh_per_second=4,
                screen=True
            ) as live:

                while self.running:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏—à—É
                    key = self._get_key()

                    if key:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à—É
                        current_screen = self.screens[self.current_screen_name]
                        result = current_screen.handle_key(key)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Å –ª–æ–≥–∞–º–∏
                        try:
                            live.update(self.render_with_logs())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {e}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        if result is False and key.lower() == 'q' and self.current_screen_name == 'main':
                            self.running = False
                            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                            break

                    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
                    # (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –¥–∞–∂–µ –±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à)
                    time.sleep(0.1)

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TUI: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            if self.orchestrator.get_processing_status().get('processor_running'):
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                self.orchestrator.stop_processing()

            self.running = False
            logger.info("TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")