"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TUI
"""

import sys
import time
from pathlib import Path
from typing import Dict, Optional
import yaml
from rich.console import Console
from rich.live import Live
from loguru import logger

from tui.base_screen import BaseScreen
from tui.main_screen import MainScreen
from tui.emulators_screen import EmulatorsScreen
from tui.settings_screen import SettingsScreen
from tui.status_screen import StatusScreen
from orchestrator import get_orchestrator


class BotTUIApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TUI"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.console = Console()
        self.orchestrator = get_orchestrator()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_path = Path("configs/tui_config.yaml")
        self.config = self._load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤
        self.screens: Dict[str, BaseScreen] = {
            'main': MainScreen(self),
            'emulators': EmulatorsScreen(self),
            'settings': SettingsScreen(self),
            'status': StatusScreen(self),
        }

        self.current_screen_name = 'main'
        self.running = False

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TUI"""
        default_config = {
            'max_concurrent_emulators': 5,
            'theme': 'default',
            'log_level': 'INFO',
            'auto_refresh_interval': 5
        }

        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
                    return {**default_config, **config.get('tui', {})}
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TUI: {e}")
                return default_config
        else:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            self._save_default_config(default_config)
            return default_config

    def _save_default_config(self, config: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_path.parent.mkdir(parents=True, exist_ok=True)
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                yaml.dump({'tui': config}, f, allow_unicode=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TUI: {self.config_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                yaml.dump({'tui': self.config}, f, allow_unicode=True)
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TUI —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def switch_screen(self, screen_name: str):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω

        Args:
            screen_name: –ò–º—è —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        """
        if screen_name in self.screens:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            self.screens[self.current_screen_name].deactivate()

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
            self.current_screen_name = screen_name
            self.screens[screen_name].activate()

            logger.debug(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω: {screen_name}")

    def _get_key(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏—à–∏ –∏–ª–∏ None
        """
        try:
            if sys.platform == 'win32':
                # Windows
                import msvcrt
                if msvcrt.kbhit():
                    key = msvcrt.getch()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
                    if key == b'\xe0' or key == b'\x00':  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                        key = msvcrt.getch()
                        key_map = {
                            b'H': 'up',
                            b'P': 'down',
                            b'K': 'left',
                            b'M': 'right',
                        }
                        return key_map.get(key)
                    elif key == b'\x1b':  # ESC
                        return 'escape'
                    elif key == b'\r':  # Enter
                        return 'enter'
                    elif key == b' ':  # Space
                        return ' '
                    elif key == b'\x08':  # Backspace
                        return 'backspace'
                    else:
                        try:
                            return key.decode('utf-8', errors='ignore')
                        except:
                            return None
            else:
                # Linux/Unix
                import select
                import tty
                import termios

                if select.select([sys.stdin], [], [], 0.0)[0]:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                    old_settings = termios.tcgetattr(sys.stdin)
                    try:
                        tty.setraw(sys.stdin.fileno())
                        ch = sys.stdin.read(1)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
                        if ch == '\x1b':
                            # –ß–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏—à–∏
                            ch2 = sys.stdin.read(1)
                            if ch2 == '[':
                                ch3 = sys.stdin.read(1)
                                key_map = {
                                    'A': 'up',
                                    'B': 'down',
                                    'C': 'right',
                                    'D': 'left',
                                }
                                return key_map.get(ch3, 'escape')
                            return 'escape'
                        elif ch == '\r' or ch == '\n':
                            return 'enter'
                        elif ch == ' ':
                            return ' '
                        elif ch == '\x7f':  # Backspace/Delete
                            return 'backspace'
                        else:
                            return ch
                    finally:
                        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
            return None

        return None

    def run(self):
        """–ó–∞–ø—É—Å–∫ TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.running = True

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TUI
        logger.remove()
        log_path = Path("data/logs/tui.log")
        log_path.parent.mkdir(parents=True, exist_ok=True)
        logger.add(
            log_path,
            rotation="1 day",
            retention="7 days",
            level=self.config.get('log_level', 'INFO')
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        # –û–Ω–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –ü–û–î TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        logger.add(
            sys.stdout,
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
            level="INFO",
            colorize=True
        )

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º screen=True –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ª–æ–≥–∞–º –∏–¥—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±—É—Ñ–µ—Ä –∫–æ–Ω—Å–æ–ª–∏
            with Live(
                    self.screens[self.current_screen_name].render(),
                    console=self.console,
                    refresh_per_second=4,
                    screen=True  # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω!
            ) as live:

                while self.running:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏—à—É
                    key = self._get_key()

                    if key:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à—É
                        current_screen = self.screens[self.current_screen_name]
                        result = current_screen.handle_key(key)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
                        try:
                            live.update(current_screen.render())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {e}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        if result is False and key.lower() == 'q' and self.current_screen_name == 'main':
                            self.running = False
                            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                            break

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
                    time.sleep(0.05)

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TUI: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            if self.orchestrator.get_processing_status().get('processor_running'):
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                self.orchestrator.stop_processing()

            self.running = False
            logger.info("TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")