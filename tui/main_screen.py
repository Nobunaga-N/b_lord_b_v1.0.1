"""
–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

from rich.layout import Layout
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from loguru import logger

from tui.base_screen import BaseScreen


class MainScreen(BaseScreen):
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""

    def render(self) -> Layout:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        layout = Layout()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = self.app.orchestrator.get_processing_status()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ–Ω—é
        menu_table = Table(show_header=False, box=None, padding=(0, 2))
        menu_table.add_column("Key", style="cyan bold", width=5)
        menu_table.add_column("Action", style="white")

        menu_table.add_row("[1]", "–≠–º—É–ª—è—Ç–æ—Ä—ã")
        menu_table.add_row("[2]", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        menu_table.add_row("[3]", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" if not status.get('processor_running') else "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
        menu_table.add_row("[4]", "–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã")
        menu_table.add_row("", "")
        menu_table.add_row("[Q]", "–í—ã—Ö–æ–¥")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        if status.get('configured'):
            status_icon = "üü¢" if status.get('processor_running') else "‚ö™"
            status_text = "–†–∞–±–æ—Ç–∞–µ—Ç" if status.get('processor_running') else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            status_info = Text()
            status_info.append(f"–°—Ç–∞—Ç—É—Å: {status_icon} {status_text}\n\n", style="bold")
            status_info.append(f"–í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {status['total_emulators']}\n")
            status_info.append(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {status['enabled_emulators']}\n")
            status_info.append(f"–ú–∞–∫—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö: {status['max_concurrent']}\n")

            if status.get('processor_running'):
                status_info.append(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['total_processed']}\n", style="green")
                status_info.append(f"–û—à–∏–±–æ–∫: {status['total_errors']}\n",
                                   style="red" if status['total_errors'] > 0 else "white")
        else:
            status_info = Text()
            status_info.append("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n", style="bold yellow")
            status_info.append("–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤\n")
            status_info.append("–≤ —Ä–∞–∑–¥–µ–ª–µ '–≠–º—É–ª—è—Ç–æ—Ä—ã'")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª–∏
        title_panel = Panel(
            Text("Beast Lord Bot Controller v2.1", justify="center", style="bold cyan"),
            style="cyan"
        )

        status_panel = Panel(
            status_info,
            title="[cyan]–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è[/cyan]",
            border_style="cyan"
        )

        menu_panel = Panel(
            menu_table,
            title="[cyan]–ú–µ–Ω—é[/cyan]",
            border_style="cyan"
        )

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        layout.split_column(
            Layout(title_panel, size=3),
            Layout(status_panel),
            Layout(menu_panel)
        )

        return layout

    def handle_key(self, key: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ"""
        key = key.lower()

        if key == '1':
            self.app.switch_screen('emulators')
            return True
        elif key == '2':
            self.app.switch_screen('settings')
            return True
        elif key == '3':
            # –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            status = self.app.orchestrator.get_processing_status()
            if status.get('processor_running'):
                self.app.orchestrator.stop_processing()
            else:
                # –ü–æ–ª—É—á–∞–µ–º max_concurrent –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                max_concurrent = self.app.config.get('max_concurrent_emulators', 5)
                self.app.orchestrator.start_processing(max_concurrent)
            return True
        elif key == '4':
            self.app.switch_screen('status')
            return True
        elif key == 'q':
            return False  # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        return False