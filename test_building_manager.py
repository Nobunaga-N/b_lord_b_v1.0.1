#!/usr/bin/env python3
"""
–¢–µ—Å—Ç BuildingManager - "–ú–û–ó–ì–ò" —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô —Ä–∞–±–æ—Ç—ã –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
"""

import sys
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>"
    )


def test_building_manager_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BuildingManager"""
    logger.info("\n=== –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò BUILDING MANAGER ===")

    try:
        from utils.building_manager import BuildingManager, get_building_manager
        from utils.database import Database
        from utils.prime_time_manager import PrimeTimeManager

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db = Database("data/test_building_manager.db")

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
        prime_manager = PrimeTimeManager()

        # –°–æ–∑–¥–∞–µ–º BuildingManager
        building_manager = BuildingManager(test_db, prime_manager)

        logger.success("‚úÖ BuildingManager —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç–æ–≤
        logger.info("–°–ª–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ—Ä–¥–∞:")
        for lord_level in [10, 13, 16, 19]:
            slots = building_manager.builder_slots_by_lord.get(lord_level, 3)
            logger.info(f"  –õ–æ—Ä–¥ {lord_level}: {slots} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:")
        for key, value in building_manager.priority_settings.items():
            logger.info(f"  {key}: {value}")

        return building_manager

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None


def test_slot_status_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–æ–≤"""
    logger.info("\n=== –¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –°–¢–ê–¢–£–°–ê –°–õ–û–¢–û–í ===")

    try:
        from utils.building_manager import get_building_manager

        building_manager = get_building_manager()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ—Ä–¥–∞
        test_emulator_id = 1

        for lord_level in [10, 13, 16, 19]:
            logger.info(f"\nüìä –¢–µ—Å—Ç –¥–ª—è –ª–æ—Ä–¥–∞ {lord_level} —É—Ä–æ–≤–Ω—è:")

            slot_status = building_manager.get_slot_status(test_emulator_id, lord_level)

            logger.info(
                f"  –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {slot_status.building_slots_free}/{slot_status.building_slots_total} —Å–ª–æ—Ç–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ")
            logger.info(
                f"  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {slot_status.research_slots_free}/{slot_status.research_slots_total} —Å–ª–æ—Ç–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ")
            logger.info(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–¥–∞–Ω–∏–π: {len(slot_status.active_buildings)}")
            logger.info(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(slot_status.active_research)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤
            has_building_slot = building_manager.has_free_building_slot(test_emulator_id, lord_level)
            has_research_slot = building_manager.has_free_research_slot(test_emulator_id)

            logger.info(f"  –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {'‚úÖ' if has_building_slot else '‚ùå'}")
            logger.info(f"  –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {'‚úÖ' if has_research_slot else '‚ùå'}")

        logger.success("‚úÖ –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")


def test_action_determination():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    logger.info("\n=== –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –î–ï–ô–°–¢–í–ò–Ø ===")

    try:
        from utils.building_manager import get_building_manager, ActionType

        building_manager = get_building_manager()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä–∞
        test_emulator_data = {
            'id': 1,
            'lord_level': 12
        }

        logger.info("üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        next_action = building_manager.determine_next_action(test_emulator_data)

        if next_action:
            logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {next_action.action_type.value}")
            logger.info(f"  –ü—Ä–µ–¥–º–µ—Ç: {next_action.item_name}")
            logger.info(f"  –£—Ä–æ–≤–µ–Ω—å: {next_action.current_level} -> {next_action.target_level}")
            logger.info(f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {next_action.priority}")
            logger.info(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {'–î–∞' if next_action.use_speedup else '–ù–µ—Ç'}")
            logger.info(f"  –ü—Ä–∞–π–º-—Ç–∞–π–º –±–æ–Ω—É—Å: +{next_action.prime_time_bonus}")
            logger.info(f"  –ü—Ä–∏—á–∏–Ω–∞: {next_action.reason}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
            logger.info("  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("    - –í—Å–µ —Å–ª–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∑–∞–Ω—è—Ç—ã")
            logger.info("    - –ù–µ—Ç –∑–¥–∞–Ω–∏–π/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞")
            logger.info("    - –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ä–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        logger.success("‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π: {e}")


def test_priority_queue():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    logger.info("\n=== –¢–ï–°–¢ –û–ß–ï–†–ï–î–ò –ü–†–ò–û–†–ò–¢–ï–¢–û–í ===")

    try:
        from utils.building_manager import get_building_manager

        building_manager = get_building_manager()

        test_emulator_id = 1
        test_lord_level = 12

        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏–π
        action_queue = building_manager.get_action_priority_queue(test_emulator_id, test_lord_level)

        logger.info(f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(action_queue)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –¥–µ–π—Å—Ç–≤–∏–π
        top_actions = action_queue[:5]

        if top_actions:
            logger.info("–¢–æ–ø-5 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:")
            for i, action in enumerate(top_actions, 1):
                action_type_icon = "üèóÔ∏è" if action.action_type.value == "building" else "üìö"
                logger.info(f"  {i}. {action_type_icon} {action.action_type.value}: {action.item_name}")
                logger.info(f"     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {action.priority} | –ü—Ä–∞–π–º-—Ç–∞–π–º: +{action.prime_time_bonus}")
                logger.info(f"     –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {'–î–∞' if action.use_speedup else '–ù–µ—Ç'}")
                logger.info(f"     {action.reason}")
        else:
            logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞")
            logger.info("  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("    - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –æ –∑–¥–∞–Ω–∏—è—Ö/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö")
            logger.info("    - –í—Å–µ –∑–¥–∞–Ω–∏—è/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            logger.info("    - –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ª–æ—Ä–¥–∞")

        logger.success("‚úÖ –¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")


def test_lord_upgrade_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞"""
    logger.info("\n=== –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –ü–û–í–´–®–ï–ù–ò–Ø –õ–û–†–î–ê ===")

    try:
        from utils.building_manager import get_building_manager

        building_manager = get_building_manager()

        test_emulator_id = 1
        test_lord_levels = [10, 12, 15, 18]

        for lord_level in test_lord_levels:
            logger.info(f"\nüëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ—Ä–¥–∞ {lord_level} -> {lord_level + 1}:")

            ready, missing = building_manager.check_lord_upgrade_requirements(test_emulator_id, lord_level)

            if ready:
                logger.success(f"  ‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –¥–æ {lord_level + 1} —É—Ä–æ–≤–Ω—è!")
            else:
                logger.warning(f"  ‚ùå –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                if missing:
                    for category, items in missing.items():
                        if items:
                            logger.info(f"    –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
                            for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
                                logger.info(f"      - {item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        logger.success("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ—Ä–¥–∞: {e}")


def test_building_summary():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É"""
    logger.info("\n=== –¢–ï–°–¢ –°–í–û–î–ö–ò –ü–û –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–£ ===")

    try:
        from utils.building_manager import get_building_manager

        building_manager = get_building_manager()

        test_emulator_id = 1
        test_lord_level = 12

        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏...")

        summary = building_manager.get_building_summary(test_emulator_id, test_lord_level)

        logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä ID: {summary['emulator_id']}")
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ—Ä–¥–∞: {summary['lord_level']}")
        logger.info(f"–ì–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞: {'‚úÖ' if summary['lord_upgrade_ready'] else '‚ùå'}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö
        building_slots = summary['slots']['building']
        research_slots = summary['slots']['research']

        logger.info(f"–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {building_slots['free']}/{building_slots['total']} —Å–ª–æ—Ç–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ")
        logger.info(f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {research_slots['free']}/{research_slots['total']} —Å–ª–æ—Ç–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ")

        # –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        next_action = summary['next_action']
        if next_action:
            logger.info(f"–°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {next_action['type']} - {next_action['item']}")
            logger.info(f"  –£—Ä–æ–≤–µ–Ω—å: {next_action['level']}")
            logger.info(f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {next_action['priority']}")
            logger.info(f"  –ü—Ä–∏—á–∏–Ω–∞: {next_action['reason']}")
        else:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")

        # –°—Ç–∞—Ç—É—Å –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        prime_status = summary['prime_time_status']
        logger.info(f"–ü—Ä–∞–π–º-—Ç–∞–π–º: –∞–∫—Ç–∏–≤–Ω–æ {prime_status['current_active']} –¥–µ–π—Å—Ç–≤–∏–π")

        logger.success("‚úÖ –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()

    logger.info("üèóÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BUILDING MANAGER - –ú–û–ó–ì–ò –°–ò–°–¢–ï–ú–´")
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô —Ä–∞–±–æ—Ç—ã –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")

    try:
        # 1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        building_manager = test_building_manager_initialization()
        if not building_manager:
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return 1

        # 2. –¢–µ—Å—Ç —Å–ª–æ—Ç–æ–≤
        test_slot_status_calculation()

        # 3. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        test_action_determination()

        # 4. –¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        test_priority_queue()

        # 5. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ä–¥–∞
        test_lord_upgrade_check()

        # 6. –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏
        test_building_summary()

        logger.success("\nüéâ –í–°–ï –¢–ï–°–¢–´ BUILDING MANAGER –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("BuildingManager –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å orchestrator.py")
        logger.info("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        logger.info("  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ database.py")
        logger.info("  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–ª—è–º –¥–∞–Ω–Ω—ã—Ö")
        logger.info("  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π –±–µ—Ä—É—Ç—Å—è –∏–∑ –ë–î")
        logger.info("  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
        logger.info("\nüöÄ –ì–û–¢–û–í –ö –ü–†–û–ú–¢–£ 16: –ª–æ–≥–∏–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

        return 0

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1


if __name__ == "__main__":
    exit(main())