"""
SmartScheduler –¥–ª—è Beast Lord Bot - –ü–†–û–ú–ü–¢ 18 –ó–ê–í–ï–†–®–ï–ù
–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π

–ö–†–ò–¢–ò–ß–ù–û: –ú–µ—Ç–æ–¥—ã –¥–ª—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
- calculate_priority() —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ (–≤–∫–ª—é—á–∞—è —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã)
- get_ready_emulators_by_priority() - –≥–æ—Ç–æ–≤—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
- calculate_next_check_time() —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–∞–π–º-—Ç–∞–π–º–∞–º–∏ –∏ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞ = –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1000 –±–∞–ª–ª–æ–≤)
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (500 –±–∞–ª–ª–æ–≤)
- –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π = —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (200 –±–∞–ª–ª–æ–≤)
- –ü—Ä–∞–π–º-—Ç–∞–π–º –¥–ª—è –Ω—É–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π = –±–æ–Ω—É—Å (+100 –±–∞–ª–ª–æ–≤)
- –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ = –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (+1 –∑–∞ —á–∞—Å)
"""

import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple, Any
from dataclasses import dataclass, field

from loguru import logger
from utils.prime_time_manager import PrimeTimeManager
from utils.database import Database


@dataclass
class EmulatorPriority:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    emulator_id: int
    emulator_index: int
    emulator_name: str
    lord_level: int
    total_priority: int = 0
    priority_factors: Dict[str, int] = field(default_factory=dict)
    next_check_time: Optional[datetime] = None
    waiting_for_prime_time: bool = False
    next_prime_time_window: Optional[datetime] = None
    recommended_actions: List[str] = field(default_factory=list)

    def __str__(self):
        return (f"EmulatorPriority(index={self.emulator_index}, "
                f"priority={self.total_priority}, lord={self.lord_level})")


class SmartScheduler:
    """
    –£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –∏ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º

    –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
    - –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
    - –£—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
    - –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–¥–∞–Ω–∏–π/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    """

    def __init__(self, database: Database, prime_time_manager: Optional[PrimeTimeManager] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

        Args:
            database: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            prime_time_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ None)
        """
        self.database = database
        self.prime_time_manager = prime_time_manager or PrimeTimeManager()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ –¢–ó - –ö–†–ò–¢–ò–ß–ù–û!
        self.priority_weights = {
            'lord_upgrade_ready': 1000,  # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞ = –í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'completed_buildings': 500,  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'completed_research': 500,   # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'free_builder_slot': 200,    # –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ = —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'free_research_slot': 200,   # –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π = —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'prime_time_bonus': 100,     # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–π–º-—Ç–∞–π–º = –±–æ–Ω—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            'per_hour_waiting': 1,       # –ó–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è = –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ—Ä–¥–∞ (–∏–∑ –¢–ó) - –ö–†–ò–¢–ò–ß–ù–û!
        self.min_check_intervals = {
            'lord_10_12': timedelta(minutes=5),   # 5 –º–∏–Ω—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            'lord_13_15': timedelta(minutes=30),  # 30 –º–∏–Ω—É—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            'lord_16_18': timedelta(hours=1),     # 1 —á–∞—Å –¥–ª—è –¥–æ–ª–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            'lord_19_plus': timedelta(hours=4),   # 4 —á–∞—Å–∞ –¥–ª—è —Ñ–∞—Ä–º–∞
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤
        self.prime_time_settings = {
            'max_wait_hours': 2.0,       # –ú–∞–∫—Å–∏–º—É–º –∂–¥–∞—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º
            'check_interval': 300,       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            'completion_buffer': 120,    # +2 –º–∏–Ω—É—Ç—ã –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
        }

        logger.info("üß† SmartScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º")

    def calculate_emulator_priority(self, emulator_data: Dict[str, Any]) -> EmulatorPriority:
        """
        –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
        –í–∫–ª—é—á–∞—è —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π

        Args:
            emulator_data: –î–∞–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ –∏–∑ –ë–î

        Returns:
            –û–±—ä–µ–∫—Ç EmulatorPriority —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        """
        priority = EmulatorPriority(
            emulator_id=emulator_data['id'],
            emulator_index=emulator_data['emulator_index'],
            emulator_name=emulator_data['emulator_name'],
            lord_level=emulator_data['lord_level']
        )

        logger.debug(f"üîç –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {priority.emulator_index}")

        # 1. –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–û–í–´–®–ï–ù–ò–Æ –õ–û–†–î–ê = –í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1000 –±–∞–ª–ª–æ–≤)
        if emulator_data.get('ready_for_lord_upgrade', False):
            bonus = self.priority_weights['lord_upgrade_ready']
            priority.priority_factors['lord_upgrade_ready'] = bonus
            priority.recommended_actions.append('upgrade_lord')
            logger.debug(f"   ‚≠ê –ì–æ—Ç–æ–≤ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –ª–æ—Ä–¥–∞ (+{bonus})")

        # 2. –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê –ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (500 –±–∞–ª–ª–æ–≤)
        completed_buildings = self.database.get_completed_buildings(emulator_data['id'])
        completed_research = self.database.get_completed_research(emulator_data['id'])

        if completed_buildings:
            count = len(completed_buildings)
            bonus = self.priority_weights['completed_buildings'] * count
            priority.priority_factors['completed_buildings'] = bonus
            priority.recommended_actions.extend(
                [f"complete_building_{b['building_name']}" for b in completed_buildings])
            logger.debug(f"   üèóÔ∏è {count} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π (+{bonus})")

        if completed_research:
            count = len(completed_research)
            bonus = self.priority_weights['completed_research'] * count
            priority.priority_factors['completed_research'] = bonus
            priority.recommended_actions.extend(
                [f"complete_research_{r['research_name']}" for r in completed_research])
            logger.debug(f"   üî¨ {count} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (+{bonus})")

        # 3. –°–í–û–ë–û–î–ù–´–ï –°–õ–û–¢–´ –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê –ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô = —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (200 –±–∞–ª–ª–æ–≤)
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤
        free_building_slots = self._get_free_building_slots(emulator_data)
        free_research_slots = self._get_free_research_slots(emulator_data)

        if free_building_slots > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç—å
            available_buildings = self.database.get_buildings_ready_for_upgrade(emulator_data['id'])
            if available_buildings:
                bonus = self.priority_weights['free_builder_slot'] * free_building_slots
                priority.priority_factors['free_builder_slot'] = bonus
                priority.recommended_actions.append('start_building')
                logger.debug(f"   üî® {free_building_slots} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (+{bonus})")

        if free_research_slots > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å
            available_research = self.database.get_available_research_for_upgrade(emulator_data['id'])
            if available_research:
                bonus = self.priority_weights['free_research_slot'] * free_research_slots
                priority.priority_factors['free_research_slot'] = bonus
                priority.recommended_actions.append('start_research')
                logger.debug(f"   üìö {free_research_slots} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (+{bonus})")

        # 4. –ü–†–ê–ô–ú-–¢–ê–ô–ú –ë–û–ù–£–° = –±–æ–Ω—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (+100 –±–∞–ª–ª–æ–≤)
        prime_time_bonus = self._calculate_prime_time_bonus(priority.recommended_actions)
        if prime_time_bonus > 0:
            priority.priority_factors['prime_time_bonus'] = prime_time_bonus
            logger.debug(f"   üéØ –ü—Ä–∞–π–º-—Ç–∞–π–º –∞–∫—Ç–∏–≤–µ–Ω (+{prime_time_bonus})")

        # 5. –í–†–ï–ú–Ø –° –ü–û–°–õ–ï–î–ù–ï–ô –û–ë–†–ê–ë–û–¢–ö–ò = –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (+1 –∑–∞ —á–∞—Å)
        waiting_bonus = self._calculate_waiting_bonus(emulator_data)
        if waiting_bonus > 0:
            priority.priority_factors['per_hour_waiting'] = waiting_bonus
            logger.debug(f"   ‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (+{waiting_bonus})")

        # –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority.total_priority = sum(priority.priority_factors.values())

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –£–ú–ù–û–ô –ª–æ–≥–∏–∫–æ–π
        priority.next_check_time = self._calculate_next_check_time(emulator_data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        prime_wait_result = self._should_wait_for_prime_time(priority.recommended_actions)
        if prime_wait_result:
            should_wait, next_prime_time = prime_wait_result
            priority.waiting_for_prime_time = should_wait
            priority.next_prime_time_window = next_prime_time

        logger.debug(f"   üíØ –ò—Ç–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.total_priority}")
        return priority

    def get_ready_emulators_by_priority(self, max_concurrent: int = 5) -> List[EmulatorPriority]:
        """
        –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        –û—Å–Ω–æ–≤–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏

        Args:
            max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–¥–æ max_concurrent), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        """
        logger.info("üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        enabled_emulators = self.database.get_all_emulators(enabled_only=True)
        current_time = datetime.now()

        ready_emulators = []

        for emulator_data in enabled_emulators:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä —Å–µ–π—á–∞—Å
            if not self._is_emulator_ready_for_processing(emulator_data, current_time):
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority = self.calculate_emulator_priority(emulator_data)

            # –ï—Å–ª–∏ —ç–º—É–ª—è—Ç–æ—Ä –∂–¥–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º –∏ –¥–æ –Ω–µ–≥–æ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if priority.waiting_for_prime_time and priority.next_prime_time_window:
                wait_hours = (priority.next_prime_time_window - current_time).total_seconds() / 3600
                if wait_hours > self.prime_time_settings['max_wait_hours']:
                    logger.debug(
                        f"‚è≥ –≠–º—É–ª—è—Ç–æ—Ä {priority.emulator_index}: —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º ({wait_hours:.1f}—á)")
                    continue

            ready_emulators.append(priority)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ) - –ö–†–ò–¢–ò–ß–ù–û!
        ready_emulators.sort(key=lambda x: x.total_priority, reverse=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        result = ready_emulators[:max_concurrent]

        logger.info(f"üìä –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(result)} –∏–∑ {len(enabled_emulators)} –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")

        for i, priority in enumerate(result, 1):
            logger.info(f"   {i}. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority}: —ç–º—É–ª—è—Ç–æ—Ä {priority.emulator_index} "
                        f"({priority.emulator_name}, –ª–æ—Ä–¥ {priority.lord_level})")

        return result

    def _calculate_next_check_time(self, emulator_data: Dict[str, Any]) -> datetime:
        """
        –ö–†–ò–¢–ò–ß–ù–û: –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞
        –° –ª–æ–≥–∏–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û

        Args:
            emulator_data: –î–∞–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é ¬± –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        """
        current_time = datetime.now()
        lord_level = emulator_data['lord_level']

        # 1. –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ—Ä–¥–∞
        min_interval = self._get_min_interval_for_lord_level(lord_level)

        # 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
        active_buildings = self.database.get_active_buildings(emulator_data['id'])
        active_research = self.database.get_active_research(emulator_data['id'])

        all_active = []

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π
        for building in active_buildings:
            if building.get('estimated_completion'):
                try:
                    completion_time = datetime.fromisoformat(building['estimated_completion'])
                    all_active.append(completion_time)
                except (ValueError, TypeError):
                    continue

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        for research in active_research:
            if research.get('estimated_completion'):
                try:
                    completion_time = datetime.fromisoformat(research['estimated_completion'])
                    all_active.append(completion_time)
                except (ValueError, TypeError):
                    continue

        if all_active:
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–∑–¥–∞–Ω–∏–µ –ò–õ–ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)
            next_completion = min(all_active)
            buffer_time = timedelta(seconds=self.prime_time_settings['completion_buffer'])
            optimal_time = next_completion + buffer_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            last_processed = emulator_data.get('last_processed')
            if last_processed:
                try:
                    last_time = datetime.fromisoformat(last_processed)
                    earliest_allowed = last_time + min_interval

                    # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º –∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
                    next_check = max(optimal_time, earliest_allowed)
                except (ValueError, TypeError):
                    next_check = optimal_time
            else:
                next_check = optimal_time

            logger.debug(
                f"‚è∞ –≠–º—É–ª—è—Ç–æ—Ä {emulator_data['emulator_index']}: —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é {next_check.strftime('%H:%M')}")
            return next_check
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –∑–∞–π—Ç–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ (–Ω–æ –Ω–µ —Ä–∞–Ω—å—à–µ –º–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
            last_processed = emulator_data.get('last_processed')
            if last_processed:
                try:
                    last_time = datetime.fromisoformat(last_processed)
                    next_check = last_time + min_interval
                except (ValueError, TypeError):
                    next_check = current_time + min_interval
            else:
                next_check = current_time + min_interval

            logger.debug(
                f"‚ö° –≠–º—É–ª—è—Ç–æ—Ä {emulator_data['emulator_index']}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {next_check.strftime('%H:%M')}")
            return next_check

    def _get_min_interval_for_lord_level(self, lord_level: int) -> timedelta:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ—Ä–¥–∞"""
        if lord_level <= 12:
            return self.min_check_intervals['lord_10_12']
        elif lord_level <= 15:
            return self.min_check_intervals['lord_13_15']
        elif lord_level <= 18:
            return self.min_check_intervals['lord_16_18']
        else:
            return self.min_check_intervals['lord_19_plus']

    def _get_free_building_slots(self, emulator_data: Dict[str, Any]) -> int:
        """
        –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏
        """
        lord_level = emulator_data['lord_level']

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ—Ä–¥–∞ (–∏–∑ –¢–ó)
        if lord_level <= 15:
            max_slots = 3  # 3 —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –¥–ª—è –ª–æ—Ä–¥–æ–≤ 10-15
        else:
            max_slots = 4  # 4 —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –¥–ª—è –ª–æ—Ä–¥–æ–≤ 16+

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        active_buildings = self.database.get_active_buildings(emulator_data['id'])
        used_slots = len(active_buildings)

        return max(0, max_slots - used_slots)

    def _get_free_research_slots(self, emulator_data: Dict[str, Any]) -> int:
        """
        –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º (–æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å)
        """
        # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (–æ–±—ã—á–Ω–æ 1 —Å–ª–æ—Ç)
        max_slots = 1

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        active_research = self.database.get_active_research(emulator_data['id'])
        used_slots = len(active_research)

        return max(0, max_slots - used_slots)

    def _calculate_prime_time_bonus(self, recommended_actions: List[str]) -> int:
        """
        –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞ –ø—Ä–∞–π–º-—Ç–∞–π–º

        Args:
            recommended_actions: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

        Returns:
            –ë–æ–Ω—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (+100 –∑–∞ –ø—Ä–∞–π–º-—Ç–∞–π–º)
        """
        if not recommended_actions:
            return 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        action_types = []
        for action in recommended_actions:
            if 'building' in action:
                action_types.append('building_power')
            elif 'research' in action or 'evolution' in action:
                action_types.append('evolution_bonus')
            elif 'lord' in action:
                action_types.append('building_power')  # –ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—Ä–¥–∞ —Å–≤—è–∑–∞–Ω–æ —Å –∑–¥–∞–Ω–∏—è–º–∏

        if not action_types:
            action_types = ['building_power']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –ª—é–±–æ–≥–æ –∏–∑ —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        max_bonus = 0
        for action_type in action_types:
            bonus = self.prime_time_manager.get_priority_bonus_for_action(action_type)
            max_bonus = max(max_bonus, bonus)

        return max_bonus

    def _calculate_waiting_bonus(self, emulator_data: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (+1 –∑–∞ —á–∞—Å)"""
        last_processed = emulator_data.get('last_processed')
        if not last_processed:
            return 0

        try:
            last_time = datetime.fromisoformat(last_processed)
            hours_waiting = (datetime.now() - last_time).total_seconds() / 3600
            bonus = int(hours_waiting * self.priority_weights['per_hour_waiting'])
            return max(0, bonus)
        except (ValueError, TypeError):
            return 0

    def _should_wait_for_prime_time(self, recommended_actions: List[str]) -> Optional[Tuple[bool, Optional[datetime]]]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –ª–∏ –∂–¥–∞—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º

        Args:
            recommended_actions: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Å—Ç–æ–∏—Ç_–∂–¥–∞—Ç—å, –≤—Ä–µ–º—è_–ø—Ä–∞–π–º_—Ç–∞–π–º–∞) –∏–ª–∏ None
        """
        if not recommended_actions:
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        action_types = []
        for action in recommended_actions:
            if 'building' in action:
                action_types.append('building_power')
            elif 'research' in action or 'evolution' in action:
                action_types.append('evolution_bonus')
            elif 'training' in action or 'soldier' in action:
                action_types.append('training_bonus')

        if not action_types:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏—Ç –ª–∏ –∂–¥–∞—Ç—å –ø—Ä–∞–π–º-—Ç–∞–π–º
        should_wait, next_time = self.prime_time_manager.should_wait_for_prime_time(
            action_types,
            self.prime_time_settings['max_wait_hours']
        )

        return should_wait, next_time

    def _is_emulator_ready_for_processing(self, emulator_data: Dict[str, Any], current_time: datetime) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ

        Args:
            emulator_data: –î–∞–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä–∞
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

        Returns:
            True –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        next_check_time = emulator_data.get('next_check_time')
        if next_check_time:
            try:
                next_time = datetime.fromisoformat(next_check_time)
                if current_time < next_time:
                    return False
            except (ValueError, TypeError):
                pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞
        if emulator_data.get('waiting_for_prime_time', False):
            next_prime_time = emulator_data.get('next_prime_time_window')
            if next_prime_time:
                try:
                    prime_time = datetime.fromisoformat(next_prime_time)
                    if current_time < prime_time:
                        return False
                except (ValueError, TypeError):
                    pass

        return True

    def update_emulator_schedule(self, emulator_id: int, priority: EmulatorPriority) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –ë–î

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            priority: –û–±—ä–µ–∫—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            update_data = {
                'priority_score': priority.total_priority,
                'next_check_time': priority.next_check_time.isoformat() if priority.next_check_time else None,
                'waiting_for_prime_time': priority.waiting_for_prime_time,
                'next_prime_time_window': priority.next_prime_time_window.isoformat() if priority.next_prime_time_window else None,
            }

            success = self.database.update_emulator_progress(priority.emulator_index, **update_data)

            if success:
                logger.debug(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ {priority.emulator_index}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ {priority.emulator_index}")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")
            return False

    def get_schedule_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        enabled_emulators = self.database.get_all_emulators(enabled_only=True)
        current_time = datetime.now()

        summary = {
            'total_enabled': len(enabled_emulators),
            'ready_now': 0,
            'waiting_for_time': 0,
            'waiting_for_prime_time': 0,
            'highest_priority': 0,
            'next_ready_time': None,
            'prime_time_status': self.prime_time_manager.get_status_summary()
        }

        next_ready_times = []

        for emulator_data in enabled_emulators:
            if self._is_emulator_ready_for_processing(emulator_data, current_time):
                summary['ready_now'] += 1
                priority = self.calculate_emulator_priority(emulator_data)
                summary['highest_priority'] = max(summary['highest_priority'], priority.total_priority)
            else:
                if emulator_data.get('waiting_for_prime_time', False):
                    summary['waiting_for_prime_time'] += 1
                else:
                    summary['waiting_for_time'] += 1

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                next_check = emulator_data.get('next_check_time')
                if next_check:
                    try:
                        next_time = datetime.fromisoformat(next_check)
                        next_ready_times.append(next_time)
                    except (ValueError, TypeError):
                        pass

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if next_ready_times:
            summary['next_ready_time'] = min(next_ready_times).strftime('%Y-%m-%d %H:%M')

        return summary


# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ==========

_scheduler_instance = None


def get_scheduler(database: Database = None, prime_time_manager: PrimeTimeManager = None) -> SmartScheduler:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ø–∞—Ç—Ç–µ—Ä–Ω Singleton)

    Args:
        database: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ None)
        prime_time_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ None)

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SmartScheduler
    """
    global _scheduler_instance

    if _scheduler_instance is None:
        if database is None:
            from utils.database import database as default_db
            database = default_db

        _scheduler_instance = SmartScheduler(database, prime_time_manager)
        logger.info("üéØ –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SmartScheduler")

    return _scheduler_instance


# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–î–û–ë–°–¢–í–ê ==========

def calculate_priority_for_emulator(emulator_index: int) -> Optional[EmulatorPriority]:
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞

    Args:
        emulator_index: –ò–Ω–¥–µ–∫—Å —ç–º—É–ª—è—Ç–æ—Ä–∞

    Returns:
        –û–±—ä–µ–∫—Ç EmulatorPriority –∏–ª–∏ None –µ—Å–ª–∏ —ç–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        scheduler = get_scheduler()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä–∞
        emulator_data = scheduler.database.get_emulator_by_index(emulator_index)
        if not emulator_data:
            return None

        return scheduler.calculate_emulator_priority(emulator_data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_index}: {e}")
        return None


def get_ready_emulators(max_concurrent: int = 5) -> List[EmulatorPriority]:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É

    Args:
        max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

    Returns:
        –°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    """
    try:
        scheduler = get_scheduler()
        return scheduler.get_ready_emulators_by_priority(max_concurrent)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")
        return []


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç SmartScheduler
    import logging
    logging.basicConfig(level=logging.INFO)

    print("=== –¢–ï–°–¢ SMARTSCHEDULER ===")
    print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_smart_scheduler.py")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = get_scheduler()
        print(f"‚úÖ SmartScheduler —Å–æ–∑–¥–∞–Ω: {scheduler}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = scheduler.get_schedule_summary()
        print(f"üìä –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total_enabled']}")
        print(f"‚úÖ –ì–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å: {summary['ready_now']}")

        print("\nüéØ –ü–†–û–ú–ü–¢ 18 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ì–û–¢–û–í –ö –ü–†–û–ú–ü–¢–£ 19: –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ orchestrator.py")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏: utils/database.py, utils/prime_time_manager.py")