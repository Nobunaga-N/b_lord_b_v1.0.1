"""
–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ Beast Lord Bot.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏.
"""

import sys
from pathlib import Path
from typing import List

import click
from loguru import logger
from utils.emulator_discovery import EmulatorDiscovery
from utils.smart_ldconsole import SmartLDConsole


class Orchestrator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.discovery = EmulatorDiscovery()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ ldconsole
        self.discovery.load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SmartLDConsole —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
        ldconsole_path = None
        if self.discovery.ldconsole_path:
            ldconsole_path = self.discovery.ldconsole_path

        self.ldconsole = SmartLDConsole(ldconsole_path)  # <-- –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Orchestrator")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        logger.remove()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        logger.add(
            sys.stdout,
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
            level="INFO"
        )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path("data/logs")
        logs_dir.mkdir(parents=True, exist_ok=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logger.add(
            logs_dir / "orchestrator.log",
            rotation="1 day",
            retention="7 days",
            level="DEBUG",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
        )


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
orchestrator = Orchestrator()


@click.group()
@click.version_option(version='1.0.0')
def cli():
    """Beast Lord Bot - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏"""
    pass


@cli.command()
def scan():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ LDPlayer"""
    logger.info("=== –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    orchestrator.discovery.load_config()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if orchestrator.discovery.rescan_with_user_settings():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = orchestrator.discovery.get_status_summary()

        logger.success("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
        logger.info(f"–í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
        logger.info(f"–í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

        if summary['ldconsole_found']:
            logger.info(f"LDConsole: {summary['ldconsole_path']}")
        else:
            logger.warning("LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        _show_emulators_list(detailed=False)

    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        sys.exit(1)


@cli.command()
@click.option('--enabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--disabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--detailed', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def list(enabled_only: bool, disabled_only: bool, detailed: bool):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –°–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    _show_emulators_list(enabled_only, disabled_only, detailed)


@cli.command()
@click.option('--id', 'emulator_ids', multiple=True, type=int, required=True,
              help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
def enable(emulator_ids: List[int]):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞(–æ–≤)"""
    emulator_ids = tuple(emulator_ids)  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    logger.info(f"=== –í–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulator_ids} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    success_count = 0
    for emu_id in emulator_ids:
        if orchestrator.discovery.enable_emulator(emu_id):
            success_count += 1
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emu_id}")

    if success_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–í–∫–ª—é—á–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {success_count}/{len(emulator_ids)}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_ids', multiple=True, type=int, required=True,
              help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
def disable(emulator_ids: List[int]):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞(–æ–≤)"""
    emulator_ids = tuple(emulator_ids)  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    logger.info(f"=== –í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulator_ids} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    success_count = 0
    for emu_id in emulator_ids:
        if orchestrator.discovery.disable_emulator(emu_id):
            success_count += 1
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emu_id}")

    if success_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–í—ã–∫–ª—é—á–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {success_count}/{len(emulator_ids)}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_id', type=int, required=True, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--text', 'notes_text', required=True, help='–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏')
def note(emulator_id: int, notes_text: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    logger.info(f"=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    if orchestrator.discovery.update_notes(emulator_id, notes_text):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
        sys.exit(1)


@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("=== –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.warning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'scan' –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    summary = orchestrator.discovery.get_status_summary()

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üìä –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
    logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
    logger.info(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

    if summary['ldconsole_found']:
        logger.info(f"üîß LDConsole: {summary['ldconsole_path']}")
    else:
        logger.warning("‚ö†Ô∏è  LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    if summary['enabled'] > 0:
        logger.info("")
        logger.info("–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã:")
        enabled = orchestrator.discovery.get_enabled_emulators()
        for idx, emu in enabled.items():
            logger.info(f"  {idx}: {emu.name} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


def _show_emulators_list(enabled_only: bool = False, disabled_only: bool = False,
                        detailed: bool = False):
    """
    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

    Args:
        enabled_only: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
        disabled_only: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ
        detailed: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if enabled_only:
        emulators = orchestrator.discovery.get_enabled_emulators()
        title = "–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"
    elif disabled_only:
        emulators = orchestrator.discovery.get_disabled_emulators()
        title = "–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"
    else:
        emulators = orchestrator.discovery.get_emulators()
        title = "–í—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"

    if not emulators:
        logger.info(f"{title}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    logger.info(f"{title}:")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
    sorted_emulators = sorted(emulators.items())

    for idx, emu in sorted_emulators:
        status_icon = "‚úÖ" if emu.enabled else "‚ùå"

        if detailed:
            logger.info(f"  {status_icon} ID {idx:2d}: {emu.name}")
            logger.info(f"      ADB –ø–æ—Ä—Ç: {emu.adb_port}")
            logger.info(f"      –í–∫–ª—é—á–µ–Ω: {'–î–∞' if emu.enabled else '–ù–µ—Ç'}")
            logger.info(f"      –ó–∞–º–µ—Ç–∫–∏: {emu.notes}")
            logger.info("")
        else:
            logger.info(f"  {status_icon} ID {idx:2d}: {emu.name:15s} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


if __name__ == '__main__':
    cli()