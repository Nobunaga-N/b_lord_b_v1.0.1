#!/usr/bin/env python3
"""
–ü–†–û–ú–ü–¢ 20: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ + CLI –∫–æ–º–∞–Ω–¥—ã

–î–û–ë–ê–í–õ–ï–ù–û:
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ú–£ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–∑–¥–∞–Ω–∏—è –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —Å proper cleanup
‚úÖ CLI –∫–æ–º–∞–Ω–¥—ã set-speedups –¥–ª—è –∑–¥–∞–Ω–∏–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è queue –∫–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
Workflow: –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ ‚Üí –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ —Å–ª–æ—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã ‚Üí
–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û (–∑–¥–∞–Ω–∏—è + –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è) ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
–ë–ï–ó –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
"""

import sys
import time
import click
import threading
from pathlib import Path
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Optional, Any
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from loguru import logger
from utils.emulator_discovery import EmulatorDiscovery
from utils.smart_ldconsole import SmartLDConsole
from utils.prime_time_manager import PrimeTimeManager
from utils.database import database
from scheduler import get_scheduler


@dataclass
class EmulatorSlot:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    status: str  # 'starting_emulator', 'processing_game', 'stopping_emulator', 'completed', 'error'
    start_time: datetime
    priority: object
    future: Optional[object] = None
    executor: Optional[ThreadPoolExecutor] = None
    # –ù–û–í–û–ï: –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    buildings_started: int = 0
    research_started: int = 0
    actions_completed: int = 0
    last_activity: Optional[datetime] = None
    errors: List[str] = None

    def __post_init__(self):
        if self.errors is None:
            self.errors = []
        if self.last_activity is None:
            self.last_activity = datetime.now()


@dataclass
class ProcessingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    total_processed: int = 0
    successful_sessions: int = 0
    failed_sessions: int = 0
    total_buildings_started: int = 0
    total_research_started: int = 0
    total_actions_completed: int = 0
    average_processing_time: float = 0.0
    last_reset: datetime = None

    def __post_init__(self):
        if self.last_reset is None:
            self.last_reset = datetime.now()


class DynamicEmulatorProcessor:
    """
    üöÄ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ü–†–û–¶–ï–°–°–û–† –≠–ú–£–õ–Ø–¢–û–†–û–í - –ü–†–û–ú–ü–¢ 20

    –ù–û–í–û–ï –í –ü–†–û–ú–ü–¢–ï 20:
    - –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """

    def __init__(self, orchestrator, max_concurrent: int = 5):
        self.orchestrator = orchestrator
        self.max_concurrent = max_concurrent
        self.running = False
        self.active_slots: Dict[int, EmulatorSlot] = {}
        self.slot_lock = threading.Lock()
        self.processor_thread = None

        # –ù–û–í–û–ï: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.stats = ProcessingStats()
        self.stats_lock = threading.Lock()

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω DynamicEmulatorProcessor —Å {max_concurrent} —Å–ª–æ—Ç–∞–º–∏ + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

    def start_processing(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        if self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        logger.info("=== –ù–ê–ß–ê–õ–û –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –≠–ú–£–õ–Ø–¢–û–†–û–í ===")

        # –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        self._sync_emulators_to_database()

        self.running = True
        self.processor_thread = threading.Thread(
            target=self._processing_loop,
            name="EmulatorProcessor",
            daemon=True
        )
        self.processor_thread.start()

        logger.success(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ (–º–∞–∫—Å {self.max_concurrent})")
        return True

    def stop_processing(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        self.running = False

        # –£–õ–£–ß–®–ï–ù–û: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        with self.slot_lock:
            active_futures = []
            for emulator_id, slot in self.active_slots.items():
                if slot.future and not slot.future.done():
                    logger.info(f"–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
                    active_futures.append((emulator_id, slot.future))

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        for emulator_id, future in active_futures:
            try:
                future.result(timeout=30.0)  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            except Exception as e:
                logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        if self.processor_thread and self.processor_thread.is_alive():
            self.processor_thread.join(timeout=5.0)

        # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        with self.slot_lock:
            for emulator_id, slot in self.active_slots.items():
                if slot.executor:
                    slot.executor.shutdown(wait=False)
            self.active_slots.clear()

        logger.success("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True

    def get_status(self) -> Dict[str, Any]:
        """–†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        with self.slot_lock:
            active_emulators = list(self.active_slots.keys())
            active_count = len(active_emulators)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–ª–æ—Ç–∞–º
            slot_details = {}
            total_buildings = 0
            total_research = 0
            total_actions = 0

            for emulator_id, slot in self.active_slots.items():
                duration = (datetime.now() - slot.start_time).total_seconds()
                slot_details[emulator_id] = {
                    'status': slot.status,
                    'duration_seconds': duration,
                    'buildings_started': slot.buildings_started,
                    'research_started': slot.research_started,
                    'actions_completed': slot.actions_completed,
                    'errors_count': len(slot.errors),
                    'last_activity': slot.last_activity.isoformat() if slot.last_activity else None
                }
                total_buildings += slot.buildings_started
                total_research += slot.research_started
                total_actions += slot.actions_completed

        with self.stats_lock:
            stats_dict = {
                'total_processed': self.stats.total_processed,
                'successful_sessions': self.stats.successful_sessions,
                'failed_sessions': self.stats.failed_sessions,
                'total_buildings_started': self.stats.total_buildings_started,
                'total_research_started': self.stats.total_research_started,
                'total_actions_completed': self.stats.total_actions_completed,
                'average_processing_time': self.stats.average_processing_time
            }

        return {
            'running': self.running,
            'max_concurrent': self.max_concurrent,
            'active_slots': active_count,
            'free_slots': self.max_concurrent - active_count,
            'active_emulators': active_emulators,
            # –ù–û–í–û–ï: –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'slot_details': slot_details,
            'current_session_stats': {
                'buildings_started': total_buildings,
                'research_started': total_research,
                'actions_completed': total_actions
            },
            'total_stats': stats_dict
        }

    def get_detailed_active_emulators(self) -> List[Dict[str, Any]]:
        """–ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö"""
        with self.slot_lock:
            details = []
            for emulator_id, slot in self.active_slots.items():
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ
                emu_info = self.orchestrator.discovery.get_emulator(emulator_id)
                if not emu_info:
                    continue

                duration = (datetime.now() - slot.start_time).total_seconds()

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                try:
                    db_progress = database.get_emulator_progress(emulator_id)
                    lord_level = db_progress.get('lord_level', 0) if db_progress else 0
                    building_progress = database.get_building_progress(emulator_id)
                    research_progress = database.get_research_progress(emulator_id)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")
                    lord_level = 0
                    building_progress = []
                    research_progress = []

                details.append({
                    'emulator_id': emulator_id,
                    'name': emu_info.name,
                    'status': slot.status,
                    'duration_seconds': duration,
                    'duration_formatted': self._format_duration(duration),
                    'lord_level': lord_level,
                    'progress': {
                        'buildings_started': slot.buildings_started,
                        'research_started': slot.research_started,
                        'actions_completed': slot.actions_completed,
                        'active_buildings': len([b for b in building_progress if
                                                 b.get('completion_time', datetime.now()) > datetime.now()]),
                        'active_research': len(
                            [r for r in research_progress if r.get('completion_time', datetime.now()) > datetime.now()])
                    },
                    'errors': slot.errors[-3:] if slot.errors else [],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                    'last_activity': slot.last_activity.isoformat() if slot.last_activity else None
                })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            details.sort(key=lambda x: x['duration_seconds'], reverse=True)
            return details

    def reset_stats(self):
        """–ù–û–í–û–ï: –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.stats_lock:
            self.stats = ProcessingStats()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞")

    def force_process_emulator(self, emulator_id: int, ignore_prime_time: bool = False) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            ready_emulators = self.orchestrator.scheduler.get_ready_emulators_by_priority(1)
            priority = None

            for p in ready_emulators:
                if p.emulator_index == emulator_id:
                    priority = p
                    break

            if not priority:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                class MockPriority:
                    def __init__(self, emu_id):
                        self.emulator_index = emu_id
                        self.total_priority = 999999
                        self.waiting_for_prime_time = False
                        self.lord_level = 10
                        self.next_check_time = datetime.now()
                        self.reasons = ['force_processing']

                priority = MockPriority(emulator_id)
                logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏, —Å–æ–∑–¥–∞–Ω mock-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–π–º-—Ç–∞–π–º
            if not ignore_prime_time and priority.waiting_for_prime_time:
                return {
                    'status': 'blocked',
                    'error': '–≠–º—É–ª—è—Ç–æ—Ä –∂–¥–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --ignore-prime-time'
                }

            if ignore_prime_time and priority.waiting_for_prime_time:
                logger.warning(f"‚ö†Ô∏è –ò–ì–ù–û–†–ò–†–£–ï–ú –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –≤ –ø–æ—Ç–æ–∫–µ)
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
            result = self._process_single_emulator(priority)

            logger.success(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")
            return {
                'status': 'error',
                'error': str(e)
            }

    def _update_slot_status(self, emulator_id: int, status: str, **kwargs):
        """–£–õ–£–ß–®–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        with self.slot_lock:
            if emulator_id in self.active_slots:
                slot = self.active_slots[emulator_id]
                slot.status = status
                slot.last_activity = datetime.now()

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'buildings_started' in kwargs:
                    slot.buildings_started += kwargs['buildings_started']
                if 'research_started' in kwargs:
                    slot.research_started += kwargs['research_started']
                if 'actions_completed' in kwargs:
                    slot.actions_completed += kwargs['actions_completed']
                if 'error' in kwargs:
                    slot.errors.append(f"{datetime.now().strftime('%H:%M:%S')}: {kwargs['error']}")

    def _processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üéØ –ù–∞—á–∞—Ç —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        while self.running:
            try:
                # 0. –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –º–µ–∂–¥—É Discovery –∏ Database
                self._sync_emulators_to_database()

                # 1. –£–õ–£–ß–®–ï–ù–û: –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._clean_completed_slots()

                # 2. –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                free_slots = self.max_concurrent - len(self.active_slots)
                if free_slots <= 0:
                    time.sleep(5.0)
                    continue

                ready_emulators = self.orchestrator.scheduler.get_ready_emulators_by_priority(free_slots)

                if not ready_emulators:
                    time.sleep(5.0)
                    continue

                # 3. –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                for priority in ready_emulators:
                    if not self.running:
                        break

                    current_free_slots = self.max_concurrent - len(self.active_slots)
                    if current_free_slots <= 0:
                        break

                    self._start_emulator_processing(priority)

                time.sleep(10.0)  # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                time.sleep(30.0)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        logger.info("üèÅ –¶–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _clean_completed_slots(self):
        """–£–õ–£–ß–®–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.slot_lock:
            completed_slots = []

            for emulator_id, slot in list(self.active_slots.items()):
                if slot.future and slot.future.done():
                    completed_slots.append((emulator_id, slot))
                elif slot.status in ['completed', 'error']:
                    completed_slots.append((emulator_id, slot))
                elif (datetime.now() - slot.start_time).total_seconds() > 1800:  # 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                    logger.warning(f"–¢–∞–π–º-–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
                    completed_slots.append((emulator_id, slot))

            for emulator_id, slot in completed_slots:
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats_for_completed_slot(slot)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
                if slot.executor:
                    slot.executor.shutdown(wait=False)

                # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
                del self.active_slots[emulator_id]

                duration = (datetime.now() - slot.start_time).total_seconds()
                logger.info(f"üßπ –û—á–∏—â–µ–Ω —Å–ª–æ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (—Å—Ç–∞—Ç—É—Å: {slot.status}, –≤—Ä–µ–º—è: {duration:.1f}—Å)")

    def _update_stats_for_completed_slot(self, slot: EmulatorSlot):
        """–ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞"""
        with self.stats_lock:
            self.stats.total_processed += 1

            if slot.status == 'completed':
                self.stats.successful_sessions += 1
            else:
                self.stats.failed_sessions += 1

            self.stats.total_buildings_started += slot.buildings_started
            self.stats.total_research_started += slot.research_started
            self.stats.total_actions_completed += slot.actions_completed

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            duration = (datetime.now() - slot.start_time).total_seconds()
            total_time = self.stats.average_processing_time * (self.stats.total_processed - 1) + duration
            self.stats.average_processing_time = total_time / self.stats.total_processed

    def _start_emulator_processing(self, priority: Any):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        emulator_id = priority.emulator_index

        with self.slot_lock:
            if emulator_id in self.active_slots:
                logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                return

            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å–ª–æ—Ç
            self.active_slots[emulator_id] = EmulatorSlot(
                status='starting',
                start_time=datetime.now(),
                priority=priority
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ ThreadPoolExecutor
        executor = ThreadPoolExecutor(max_workers=1, thread_name_prefix=f"Emu{emulator_id}")
        future = executor.submit(self._process_single_emulator, priority)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º future –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        with self.slot_lock:
            if emulator_id in self.active_slots:
                self.active_slots[emulator_id].future = future
                self.active_slots[emulator_id].executor = executor

        logger.info(f"üéØ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority})")

    def _process_single_emulator(self, priority: Any) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ workflow:
        –≥–æ—Ç–æ–≤—ã–π ‚Üí –∑–∞–ø—É—Å–∫ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º) ‚Üí –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        """
        emulator_id = priority.emulator_index
        start_time = datetime.now()

        try:
            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            # –≠–¢–ê–ü 1: –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
            self._update_slot_status(emulator_id, 'starting_emulator')

            if not self.orchestrator.ldconsole.is_running(emulator_id):
                logger.info(f"–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä –∏ –∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB
                success = self.orchestrator.ldconsole.start_emulator(emulator_id)
                if not success:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}"
                    logger.error(error_msg)
                    self._update_slot_status(emulator_id, 'error', error=error_msg)
                    return {'status': 'error', 'error': error_msg}

                # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                if not self._wait_for_adb_ready(emulator_id):
                    error_msg = f"ADB –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}"
                    logger.error(error_msg)
                    self._update_slot_status(emulator_id, 'error', error=error_msg)
                    return {'status': 'error', 'error': error_msg}

                logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤")
            else:
                logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            # –≠–¢–ê–ü 2: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã
            self._update_slot_status(emulator_id, 'processing_game')
            logger.info(f"üéÆ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            # –ó–î–ï–°–¨ –ë–£–î–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° bot_worker.py (–ø—Ä–æ–º–ø—Ç 21)
            # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ —Ä–∞–±–æ—Ç—É
            processing_result = self._simulate_parallel_game_processing(emulator_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ—Ç–∞
            self._update_slot_status(
                emulator_id,
                'completed',
                buildings_started=processing_result.get('buildings_started', 0),
                research_started=processing_result.get('research_started', 0),
                actions_completed=processing_result.get('actions_completed', 0)
            )

            # –≠–¢–ê–ü 3: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
            self._update_slot_status(emulator_id, 'stopping_emulator')
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")

            if self.orchestrator.ldconsole.stop_emulator(emulator_id):
                logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            processing_time = (datetime.now() - start_time).total_seconds()
            result = {
                'status': 'success',
                'processing_time': processing_time,
                'buildings_started': processing_result.get('buildings_started', 0),
                'research_started': processing_result.get('research_started', 0),
                'actions_completed': processing_result.get('actions_completed', 0)
            }

            logger.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å")
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}"
            logger.error(error_msg)
            self._update_slot_status(emulator_id, 'error', error=error_msg)

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.orchestrator.ldconsole.stop_emulator(emulator_id)
            except:
                pass

            return {
                'status': 'error',
                'error': error_msg,
                'processing_time': (datetime.now() - start_time).total_seconds()
            }

    def _wait_for_adb_ready(self, emulator_id: int, max_wait: int = 90) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (–º–∞–∫—Å {max_wait}—Å)")

        start_time = datetime.now()
        last_status_log = start_time

        while (datetime.now() - start_time).total_seconds() < max_wait:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if (datetime.now() - last_status_log).total_seconds() >= 10:
                elapsed = (datetime.now() - start_time).total_seconds()
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ADB —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} - –ø—Ä–æ—à–ª–æ {elapsed:.0f}—Å")
                last_status_log = datetime.now()

            if self.orchestrator.ldconsole.is_adb_ready(emulator_id):
                total_time = (datetime.now() - start_time).total_seconds()
                logger.success(f"‚úÖ ADB –≥–æ—Ç–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞ {total_time:.1f}—Å")
                return True

            time.sleep(5.0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

        total_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} ({total_time:.1f}—Å)")
        return False

    def _simulate_parallel_game_processing(self, emulator_id: int) -> Dict[str, Any]:
        """–í–†–ï–ú–ï–ù–ù–ê–Ø —Å–∏–º—É–ª—è—Ü–∏—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã (–¥–æ –ø—Ä–æ–º–ø—Ç–∞ 21)"""
        logger.info(f"üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ —Ä–∞–±–æ—Ç—É –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        time.sleep(5.0)  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã

        import random
        return {
            'buildings_started': random.randint(1, 3),
            'research_started': random.randint(0, 1),
            'actions_completed': random.randint(3, 8)
        }

    def _sync_emulators_to_database(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É Discovery –∏ Database"""
        try:
            emulators = self.orchestrator.discovery.get_emulators()
            for emu_index, emu_info in emulators.items():
                database.sync_emulator(
                    emulator_index=emu_index,
                    emulator_name=emu_info.name,
                    enabled=emu_info.enabled,
                    notes=emu_info.notes
                )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")

    def _format_duration(self, seconds: float) -> str:
        """–ù–û–í–û–ï: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds:.0f}—Å"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes:.0f}–º {secs:.0f}—Å"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours:.0f}—á {minutes:.0f}–º"


class Orchestrator:
    """
    üéØ –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô ORCHESTRATOR

    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
    - EmulatorDiscovery (–∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)
    - SmartLDConsole (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏)
    - SmartScheduler (—É–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    - DynamicEmulatorProcessor (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
    - PrimeTimeManager (—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤)
    """

    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ Orchestrator...")

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmulatorDiscovery
        self.discovery = EmulatorDiscovery()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω EmulatorDiscovery, –∫–æ–Ω—Ñ–∏–≥: {self.discovery.config_path}")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartLDConsole
        ldconsole_path = self.discovery.find_ldplayer_path()
        if not ldconsole_path:
            logger.error("ldconsole.exe –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise RuntimeError("LDPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.ldconsole = SmartLDConsole(ldconsole_path)
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω SmartLDConsole —Å –ø—É—Ç–µ–º: {ldconsole_path}")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PrimeTimeManager
        self.prime_time_manager = PrimeTimeManager()

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartScheduler
        self.scheduler = get_scheduler(database, self.prime_time_manager)

        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DynamicEmulatorProcessor
        self.processor = DynamicEmulatorProcessor(self, max_concurrent=5)

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Orchestrator")
        logger.info("  ‚úÖ SmartLDConsole –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ SmartScheduler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        logger.info("  ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –∑–¥–∞–Ω–∏—è –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")


# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ORCHESTRATOR ==========

_orchestrator_instance = None


def get_orchestrator() -> Orchestrator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Orchestrator (–ø–∞—Ç—Ç–µ—Ä–Ω Singleton)"""
    global _orchestrator_instance

    if _orchestrator_instance is None:
        _orchestrator_instance = Orchestrator()

    return _orchestrator_instance


# ========== CLI –ö–û–ú–ê–ù–î–´ ==========

@click.group()
def cli():
    """Beast Lord Bot - –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Orchestrator v2.0 + –ü–†–û–ú–ü–¢ 20"""
    pass


@cli.command()
def scan():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ LDPlayer"""
    logger.info("=== –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –≠–ú–£–õ–Ø–¢–û–†–û–í ===")
    orchestrator = get_orchestrator()

    if orchestrator.discovery.scan_emulators():
        if orchestrator.discovery.save_config():
            logger.success("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")


def _show_emulators_list(enabled_only: bool, disabled_only: bool, detailed: bool):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    orchestrator = get_orchestrator()

    if enabled_only:
        emulators = orchestrator.discovery.get_enabled_emulators()
        title = "–í–ö–õ–Æ–ß–ï–ù–ù–´–ï –≠–ú–£–õ–Ø–¢–û–†–´"
    elif disabled_only:
        emulators = orchestrator.discovery.get_disabled_emulators()
        title = "–í–´–ö–õ–Æ–ß–ï–ù–ù–´–ï –≠–ú–£–õ–Ø–¢–û–†–´"
    else:
        emulators = orchestrator.discovery.get_emulators()
        title = "–í–°–ï –≠–ú–£–õ–Ø–¢–û–†–´"

    logger.info(f"=== {title} ===")

    if not emulators:
        logger.info("–≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    for idx, emu in emulators.items():
        status_icon = "‚úÖ" if emu.enabled else "‚ùå"
        running_status = "üü¢" if orchestrator.ldconsole.is_running(idx) else "üî¥"

        if detailed:
            logger.info(f"{status_icon} ID {idx}: {emu.name}")
            logger.info(f"   –ü–æ—Ä—Ç ADB: {emu.adb_port}")
            logger.info(
                f"   –°—Ç–∞—Ç—É—Å: {running_status} {'–ó–∞–ø—É—â–µ–Ω' if orchestrator.ldconsole.is_running(idx) else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            logger.info(f"   –ó–∞–º–µ—Ç–∫–∏: {emu.notes}")
            logger.info("")
        else:
            logger.info(f"{status_icon} {running_status} ID {idx}: {emu.name} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


@cli.command()
@click.option('--enabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--disabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--detailed', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def list(enabled_only: bool, disabled_only: bool, detailed: bool):
    """–°–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –°–ü–ò–°–û–ö –≠–ú–£–õ–Ø–¢–û–†–û–í ===")
    orchestrator = get_orchestrator()

    if not orchestrator.discovery.load_config():
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    _show_emulators_list(enabled_only, disabled_only, detailed)


@cli.command()
@click.option('--id', 'emulator_id', required=True, type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
def enable(emulator_id: int):
    """–í–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä"""
    logger.info(f"=== –í–ö–õ–Æ–ß–ï–ù–ò–ï –≠–ú–£–õ–Ø–¢–û–†–ê {emulator_id} ===")
    orchestrator = get_orchestrator()

    if not orchestrator.discovery.load_config():
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    if orchestrator.discovery.enable_emulator(emulator_id):
        orchestrator.discovery.save_config()
        logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –≤–∫–ª—é—á–µ–Ω")
    else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_id', required=True, type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
def disable(emulator_id: int):
    """–í—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä"""
    logger.info(f"=== –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –≠–ú–£–õ–Ø–¢–û–†–ê {emulator_id} ===")
    orchestrator = get_orchestrator()

    if not orchestrator.discovery.load_config():
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    if orchestrator.discovery.disable_emulator(emulator_id):
        orchestrator.discovery.save_config()
        logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –≤—ã–∫–ª—é—á–µ–Ω")
    else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_id', required=True, type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--text', 'notes_text', required=True, help='–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏')
def note(emulator_id: int, notes_text: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    logger.info(f"=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} ===")
    orchestrator = get_orchestrator()

    if not orchestrator.discovery.load_config():
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    if orchestrator.discovery.update_notes(emulator_id, notes_text):
        orchestrator.discovery.save_config()
        logger.success(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
        sys.exit(1)


# ========== –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò + –ü–†–û–ú–ü–¢ 20 ==========

@cli.command('start-processing')
@click.option('--max-concurrent', default=5, help='–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
def start_processing(max_concurrent: int):
    """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info(f"=== –ó–ê–ü–£–°–ö –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò (–º–∞–∫—Å {max_concurrent}) ===")
    orchestrator = get_orchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    enabled = orchestrator.discovery.get_enabled_emulators()
    if not enabled:
        logger.error("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤. –í–∫–ª—é—á–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π 'enable'")
        sys.exit(1)

    logger.info(f"–í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(enabled)}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    orchestrator.processor.max_concurrent = max_concurrent

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if orchestrator.processor.start_processing():
        logger.success("üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É 'stop-processing'")

        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while orchestrator.processor.running:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            orchestrator.processor.stop_processing()
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        sys.exit(1)


@cli.command('stop-processing')
def stop_processing():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –û–°–¢–ê–ù–û–í–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===")
    orchestrator = get_orchestrator()

    if orchestrator.processor.stop_processing():
        logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")


@cli.command()
@click.option('--detailed', is_flag=True, help='–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
@click.option('--active-emulators', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
def status(detailed: bool, active_emulators: bool):
    """–†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    logger.info("=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ===")
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.warning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'scan' –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö
    summary = orchestrator.discovery.get_status_summary()
    logger.info(f"üìä –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
    logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
    logger.info(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

    if summary['ldconsole_found']:
        logger.info(f"üîß LDConsole: {summary['ldconsole_path']}")
    else:
        logger.warning("‚ö†Ô∏è  LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ù–û–í–û–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processor_status = orchestrator.processor.get_status()
    logger.info(f"\nüîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:")
    logger.info(f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ó–∞–ø—É—â–µ–Ω–∞' if processor_status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['active_slots']}/{processor_status['max_concurrent']}")
    logger.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['free_slots']}")

    if processor_status['active_emulators']:
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã: {processor_status['active_emulators']}")

    # –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    current_stats = processor_status['current_session_stats']
    logger.info(f"\nüìà –¢–ï–ö–£–©–ê–Ø –°–ï–°–°–ò–Ø:")
    logger.info(f"–ó–¥–∞–Ω–∏–π –Ω–∞—á–∞—Ç–æ: {current_stats['buildings_started']}")
    logger.info(f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞—á–∞—Ç–æ: {current_stats['research_started']}")
    logger.info(f"–î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {current_stats['actions_completed']}")

    # –ù–û–í–û–ï: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if detailed:
        total_stats = processor_status['total_stats']
        logger.info(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_stats['total_processed']}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ: {total_stats['successful_sessions']}")
        logger.info(f"–° –æ—à–∏–±–∫–∞–º–∏: {total_stats['failed_sessions']}")
        logger.info(f"–í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π: {total_stats['total_buildings_started']}")
        logger.info(f"–í—Å–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {total_stats['total_research_started']}")
        logger.info(f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_stats['total_actions_completed']}")
        if total_stats['average_processing_time'] > 0:
            logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_stats['average_processing_time']:.1f}—Å")

    # –ù–û–í–û–ï: –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    if active_emulators and processor_status['active_emulators']:
        logger.info(f"\nüéØ –ê–ö–¢–ò–í–ù–´–ï –≠–ú–£–õ–Ø–¢–û–†–´:")
        active_details = orchestrator.processor.get_detailed_active_emulators()

        for detail in active_details:
            logger.info(f"\nüì± –≠–º—É–ª—è—Ç–æ—Ä {detail['emulator_id']}: {detail['name']}")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {detail['status']}")
            logger.info(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {detail['duration_formatted']}")
            logger.info(f"   –£—Ä–æ–≤–µ–Ω—å –ª–æ—Ä–¥–∞: {detail['lord_level']}")

            progress = detail['progress']
            logger.info(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å:")
            logger.info(f"     üèóÔ∏è –ó–¥–∞–Ω–∏–π –Ω–∞—á–∞—Ç–æ: {progress['buildings_started']}")
            logger.info(f"     üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞—á–∞—Ç–æ: {progress['research_started']}")
            logger.info(f"     üéØ –î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress['actions_completed']}")
            logger.info(f"     üìä –ê–∫—Ç–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç—Å—è: {progress['active_buildings']}")
            logger.info(f"     üìä –ê–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É–µ—Ç—Å—è: {progress['active_research']}")

            if detail['errors']:
                logger.warning(f"   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏: {'; '.join(detail['errors'])}")

    # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if detailed:
        try:
            schedule_summary = orchestrator.scheduler.get_schedule_summary()
            logger.info(f"\nüìÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö:")
            logger.info(f"–ì–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å: {schedule_summary['ready_now']}")
            logger.info(f"–ñ–¥—É—Ç –≤—Ä–µ–º–µ–Ω–∏: {schedule_summary['waiting_for_time']}")
            logger.info(f"–ñ–¥—É—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º: {schedule_summary['waiting_for_prime_time']}")

            if schedule_summary['next_ready_time']:
                logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –≥–æ—Ç–æ–≤: {schedule_summary['next_ready_time']}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    if summary['enabled'] > 0 and not active_emulators:
        logger.info(f"\n‚úÖ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –≠–ú–£–õ–Ø–¢–û–†–´:")
        enabled = orchestrator.discovery.get_enabled_emulators()
        for idx, emu in enabled.items():
            running_status = "üü¢" if orchestrator.ldconsole.is_running(idx) else "üî¥"
            logger.info(f"  {running_status} ID {idx}: {emu.name} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


@cli.command()
@click.option('--max-concurrent', default=5, help='–ú–∞–∫—Å–∏–º—É–º —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏')
@click.option('--show-blocked', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
def queue(max_concurrent: int, show_blocked: bool):
    """–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –æ—á–µ—Ä–µ–¥—å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    logger.info(f"=== –û–ß–ï–†–ï–î–¨ –≠–ú–£–õ–Ø–¢–û–†–û–í (–º–∞–∫—Å {max_concurrent}) ===")
    orchestrator = get_orchestrator()

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    ready_emulators = orchestrator.scheduler.get_ready_emulators_by_priority(max_concurrent)

    if not ready_emulators:
        logger.info("–ù–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

        # –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if show_blocked:
            logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")
            try:
                all_emulators = database.get_all_emulators(enabled_only=True)
                blocked_count = 0

                for emu in all_emulators:
                    emulator_id = emu['emulator_index']
                    priority = orchestrator.scheduler.calculate_priority(emulator_id)

                    if priority.next_check_time > datetime.now():
                        blocked_count += 1
                        time_left = (priority.next_check_time - datetime.now()).total_seconds()
                        logger.info(f"üîí –≠–º—É–ª—è—Ç–æ—Ä {emulator_id}: –∂–¥–µ—Ç {time_left / 60:.0f}–º–∏–Ω")

                if blocked_count == 0:
                    logger.info("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")

        return

    logger.info(f"–ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(ready_emulators)}")

    for i, priority in enumerate(ready_emulators, 1):
        emulator_id = priority.emulator_index

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ
        emu_info = orchestrator.discovery.get_emulator(emulator_id)
        emu_name = emu_info.name if emu_info else f"–≠–º—É–ª—è—Ç–æ—Ä_{emulator_id}"

        # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–¥–∞–Ω–∏–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        try:
            building_progress = database.get_building_progress(emulator_id)
            research_progress = database.get_research_progress(emulator_id)

            active_buildings = len(
                [b for b in building_progress if b.get('completion_time', datetime.now()) > datetime.now()])
            active_research = len(
                [r for r in research_progress if r.get('completion_time', datetime.now()) > datetime.now()])

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")
            active_buildings = 0
            active_research = 0

        logger.info(f"\n{i}. üéØ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id}: {emu_name}")
        logger.info(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.total_priority}")
        logger.info(f"   –£—Ä–æ–≤–µ–Ω—å –ª–æ—Ä–¥–∞: {priority.lord_level}")
        logger.info(f"   –ê–∫—Ç–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç—Å—è: üèóÔ∏è {active_buildings} | üî¨ {active_research}")

        if priority.waiting_for_prime_time:
            logger.warning(f"   ‚è∞ –ñ–¥–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º")

        if priority.reasons:
            logger.info(f"   –ü—Ä–∏—á–∏–Ω—ã: {', '.join(priority.reasons)}")


@cli.command('reset-stats')
def reset_stats():
    """–ù–û–í–û–ï: –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("=== –°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===")
    orchestrator = get_orchestrator()

    orchestrator.processor.reset_stats()
    logger.success("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞")


@cli.command('monitor')
@click.option('--interval', default=30, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
@click.option('--count', default=0, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)')
def monitor(interval: int, count: int):
    """–ù–û–í–û–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info(f"=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ù–´–• –≠–ú–£–õ–Ø–¢–û–†–û–í (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval}—Å) ===")
    orchestrator = get_orchestrator()

    iteration = 0
    try:
        while count == 0 or iteration < count:
            iteration += 1

            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # print("\033[2J\033[H", end="")

            current_time = datetime.now().strftime("%H:%M:%S")
            logger.info(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{iteration} - {current_time}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            processor_status = orchestrator.processor.get_status()

            if processor_status['running']:
                logger.info(
                    f"üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ - {processor_status['active_slots']}/{processor_status['max_concurrent']} —Å–ª–æ—Ç–æ–≤")

                if processor_status['active_emulators']:
                    active_details = orchestrator.processor.get_detailed_active_emulators()

                    for detail in active_details:
                        progress = detail['progress']
                        logger.info(
                            f"  üì± {detail['emulator_id']}: {detail['status']} | {detail['duration_formatted']} | üèóÔ∏è{progress['buildings_started']} üî¨{progress['research_started']} üéØ{progress['actions_completed']}")
                else:
                    logger.info("  ‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
            else:
                logger.info("üî¥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            if count == 0 or iteration < count:
                time.sleep(interval)

    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# ========== –ù–û–í–´–ï CLI –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ö–û–†–ï–ù–ò–Ø–ú–ò ==========

@cli.command('set-speedups')
@click.option('--id', 'emulator_id', required=True, type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--building', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è')
@click.option('--enabled', type=bool, required=True, help='–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏—è')
def set_speedups(emulator_id: int, building: str, enabled: bool):
    """–ù–û–í–û–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è–º–∏ –∑–¥–∞–Ω–∏–π"""
    logger.info(f"=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ö–û–†–ï–ù–ò–Ø–ú–ò –ó–î–ê–ù–ò–ô ===")
    logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id}, –∑–¥–∞–Ω–∏–µ '{building}', —É—Å–∫–æ—Ä–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π –≤ –ë–î
        database.set_building_speedup(emulator_id, building, enabled)
        logger.success(
            f"‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏—è –¥–ª—è –∑–¥–∞–Ω–∏—è '{building}' –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ {emulator_id} {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–∫–æ—Ä–µ–Ω–∏–π: {e}")
        sys.exit(1)


@cli.command('set-research-speedups')
@click.option('--id', 'emulator_id', required=True, type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--research', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
@click.option('--enabled', type=bool, required=True, help='–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏—è')
def set_research_speedups(emulator_id: int, research: str, enabled: bool):
    """–ù–û–í–û–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    logger.info(f"=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ö–û–†–ï–ù–ò–Ø–ú–ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô ===")
    logger.info(
        f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id}, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '{research}', —É—Å–∫–æ—Ä–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π –≤ –ë–î
        database.set_research_speedup(emulator_id, research, enabled)
        logger.success(
            f"‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è '{research}' –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ {emulator_id} {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–∫–æ—Ä–µ–Ω–∏–π: {e}")
        sys.exit(1)


@cli.command('show-speedups')
@click.option('--id', 'emulator_id', type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ (–≤—Å–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)')
def show_speedups(emulator_id: Optional[int]):
    """–ù–û–í–û–ï: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π"""
    logger.info("=== –ù–ê–°–¢–†–û–ô–ö–ò –£–°–ö–û–†–ï–ù–ò–ô ===")

    try:
        if emulator_id:
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}:")
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–¥–∞–Ω–∏–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
            building_progress = database.get_building_progress(emulator_id)
            research_progress = database.get_research_progress(emulator_id)
        else:
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π
            building_progress = []
            research_progress = []
            emulators = database.get_all_emulators()
            for emu in emulators:
                building_progress.extend(database.get_building_progress(emu['emulator_index']))
                research_progress.extend(database.get_research_progress(emu['emulator_index']))

        if building_progress:
            logger.info("\nüèóÔ∏è –£–°–ö–û–†–ï–ù–ò–Ø –ó–î–ê–ù–ò–ô:")
            for building in building_progress:
                if building.get('use_speedups') is not None:
                    status = "‚úÖ" if building['use_speedups'] else "‚ùå"
                    logger.info(f"  {status} –≠–º—É–ª—è—Ç–æ—Ä {building['emulator_id']}: {building['building_name']}")

        if research_progress:
            logger.info("\nüî¨ –£–°–ö–û–†–ï–ù–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô:")
            for research in research_progress:
                if research.get('use_speedups') is not None:
                    status = "‚úÖ" if research['use_speedups'] else "‚ùå"
                    logger.info(f"  {status} –≠–º—É–ª—è—Ç–æ—Ä {research['emulator_id']}: {research['research_name']}")

        if not building_progress and not research_progress:
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–∫–æ—Ä–µ–Ω–∏–π: {e}")
        sys.exit(1)


# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´ ==========

@cli.command('force-process')
@click.option('--id', 'emulator_id', required=True, type=int, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--ignore-prime-time', is_flag=True, help='–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞')
def force_process(emulator_id: int, ignore_prime_time: bool):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    logger.info(f"=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –≠–ú–£–õ–Ø–¢–û–†–ê {emulator_id} ===")
    orchestrator = get_orchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–º—É–ª—è—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∫–ª—é—á–µ–Ω
    if not orchestrator.discovery.load_config():
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    emu_info = orchestrator.discovery.get_emulator_info(emulator_id)
    if not emu_info:
        logger.error(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)

    if not emu_info.enabled:
        logger.error(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –≤—ã–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π 'enable'")
        sys.exit(1)

    logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {emu_info.name}")
    if ignore_prime_time:
        logger.warning("‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    try:
        result = orchestrator.processor.force_process_emulator(emulator_id, ignore_prime_time)

        if result['status'] == 'success':
            logger.success(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.1f}—Å")
            logger.info(f"üèóÔ∏è –ó–¥–∞–Ω–∏–π –Ω–∞—á–∞—Ç–æ: {result.get('buildings_started', 0)}")
            logger.info(f"üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞—á–∞—Ç–æ: {result.get('research_started', 0)}")
            logger.info(f"üéØ –î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result.get('actions_completed', 0)}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            sys.exit(1)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


@cli.command()
def debug():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
    logger.info("=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
    orchestrator = get_orchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º EmulatorDiscovery
    if not orchestrator.discovery.load_config():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é EmulatorDiscovery")
        return

    discovery_emulators = orchestrator.discovery.get_enabled_emulators()
    logger.info(f"üìÅ EmulatorDiscovery: {len(discovery_emulators)} –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
    for idx, emu in discovery_emulators.items():
        logger.info(f"   ID {idx}: {emu.name} (–≤–∫–ª—é—á–µ–Ω: {emu.enabled})")

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –≤ –ë–î
    logger.info("\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    try:
        for emu_index, emu_info in orchestrator.discovery.get_emulators().items():
            database.sync_emulator(
                emulator_index=emu_index,
                emulator_name=emu_info.name,
                enabled=emu_info.enabled,
                notes=emu_info.notes
            )
        logger.success("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Database
    try:
        db_emulators = database.get_all_emulators(enabled_only=True)
        logger.info(f"\nüíæ Database: {len(db_emulators)} –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        for emu in db_emulators:
            logger.info(f"   ID {emu['emulator_index']}: {emu['emulator_name']} (–≤–∫–ª—é—á–µ–Ω: {emu['enabled']})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Scheduler
    try:
        ready_emulators = orchestrator.scheduler.get_ready_emulators_by_priority(5)
        logger.info(f"\nüéØ Scheduler: {len(ready_emulators)} –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        for i, priority in enumerate(ready_emulators, 1):
            logger.info(f"   {i}. –≠–º—É–ª—è—Ç–æ—Ä {priority.emulator_index} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º: {e}")
        return

    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    try:
        processor_status = orchestrator.processor.get_status()
        logger.info(f"\nüîÑ DynamicEmulatorProcessor:")
        logger.info(f"   –ó–∞–ø—É—â–µ–Ω: {processor_status['running']}")
        logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['active_slots']}")
        logger.info(f"   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {processor_status['total_stats']}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")

    logger.success("‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞")


if __name__ == '__main__':
    cli()