#!/usr/bin/env python3
"""
–ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô ORCHESTRATOR.PY - –ü–†–û–ú–ü–¢ 19

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù:
‚úÖ CLI –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π orchestrator
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
‚úÖ –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
Workflow: –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ ‚Üí –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ —Å–ª–æ—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã ‚Üí
–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û (–∑–¥–∞–Ω–∏—è + –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è) ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
–ë–ï–ó –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
"""

import sys
import time
import click
import threading
from pathlib import Path
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Optional, Any
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from loguru import logger
from utils.emulator_discovery import EmulatorDiscovery
from utils.smart_ldconsole import SmartLDConsole
from utils.prime_time_manager import PrimeTimeManager
from utils.database import database
from scheduler import get_scheduler


@dataclass
class EmulatorSlot:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    status: str  # 'starting_emulator', 'processing_game', 'stopping_emulator', 'completed', 'error'
    start_time: datetime
    priority: object
    future: Optional[object] = None
    executor: Optional[ThreadPoolExecutor] = None


class DynamicEmulatorProcessor:
    """
    üöÄ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ü–†–û–¶–ï–°–°–û–† –≠–ú–£–õ–Ø–¢–û–†–û–í

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ù–ï –±–∞—Ç—á–∏):
    - –ú–∞–∫—Å–∏–º—É–º N –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
    - –£–º–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    - –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    """

    def __init__(self, orchestrator, max_concurrent: int = 5):
        self.orchestrator = orchestrator
        self.max_concurrent = max_concurrent
        self.running = False
        self.active_slots: Dict[int, EmulatorSlot] = {}
        self.slot_lock = threading.Lock()
        self.processor_thread = None

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω DynamicEmulatorProcessor —Å {max_concurrent} —Å–ª–æ—Ç–∞–º–∏")

    def start_processing(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        if self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        logger.info("=== –ù–ê–ß–ê–õ–û –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –≠–ú–£–õ–Ø–¢–û–†–û–í ===")

        # –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        self._sync_emulators_to_database()

        self.running = True
        self.processor_thread = threading.Thread(
            target=self._processing_loop,
            name="EmulatorProcessor",
            daemon=True
        )
        self.processor_thread.start()

        logger.success(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ (–º–∞–∫—Å {self.max_concurrent})")
        return True

    def stop_processing(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        self.running = False

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        with self.slot_lock:
            for emulator_id, slot in self.active_slots.items():
                if slot.future and not slot.future.done():
                    logger.info(f"–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        if self.processor_thread and self.processor_thread.is_alive():
            self.processor_thread.join(timeout=5.0)

        logger.success("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        with self.slot_lock:
            active_emulators = list(self.active_slots.keys())
            active_count = len(active_emulators)

        return {
            'running': self.running,
            'max_concurrent': self.max_concurrent,
            'active_slots': active_count,
            'free_slots': self.max_concurrent - active_count,
            'active_emulators': active_emulators
        }

    def _update_slot_status(self, emulator_id: int, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–∞"""
        with self.slot_lock:
            if emulator_id in self.active_slots:
                self.active_slots[emulator_id].status = status

    def _processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üéØ –ù–∞—á–∞—Ç —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        while self.running:
            try:
                # 0. –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –º–µ–∂–¥—É Discovery –∏ Database
                self._sync_emulators_to_database()

                # 1. –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                self._cleanup_completed_slots()

                # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                free_slots = self.max_concurrent - len(self.active_slots)
                if free_slots > 0:
                    ready_emulators = self.orchestrator.scheduler.get_ready_emulators_by_priority(free_slots)

                    if ready_emulators:
                        logger.info(
                            f"üìä –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(ready_emulators)} –∏–∑ {len(self.orchestrator.discovery.get_enabled_emulators())} –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
                        for i, priority in enumerate(ready_emulators, 1):
                            logger.info(
                                f"   {i}. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority}: —ç–º—É–ª—è—Ç–æ—Ä {priority.emulator_index} ({priority.emulator_name}, –ª–æ—Ä–¥ {priority.lord_level})")

                # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                self._start_available_emulators(ready_emulators if free_slots > 0 else [])

                # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                if self.active_slots:
                    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(self.active_slots)}/{self.max_concurrent}")
                    for emu_id, slot_info in self.active_slots.items():
                        logger.info(f"  –°–ª–æ—Ç {emu_id}: {slot_info.status} (—Å {slot_info.start_time})")

                # 5. –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                time.sleep(60)

    def _cleanup_completed_slots(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        with self.slot_lock:
            completed_emulators = []

            for emulator_id, slot in list(self.active_slots.items()):
                if slot.future and slot.future.done():
                    completed_emulators.append(emulator_id)

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ª–æ–≥–∏—Ä—É–µ–º
                    try:
                        result = slot.future.result()
                        final_status = result.get('status', 'unknown')
                        logger.info(f"–°–ª–æ—Ç {emulator_id} –∑–∞–≤–µ—Ä—à–µ–Ω: {final_status}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ—Ç–∞ {emulator_id}: {e}")

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
                    if slot.executor:
                        slot.executor.shutdown(wait=False)

                    # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
                    del self.active_slots[emulator_id]

    def _start_available_emulators(self, ready_emulators: List[Any]):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        with self.slot_lock:
            free_slots = self.max_concurrent - len(self.active_slots)

        if free_slots <= 0 or not ready_emulators:
            return

        logger.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {free_slots}, –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(ready_emulators)}")

        for priority in ready_emulators[:free_slots]:
            emulator_id = priority.emulator_index

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            with self.slot_lock:
                if emulator_id in self.active_slots:
                    continue

            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
            self._start_emulator_processing(priority)

    def _start_emulator_processing(self, priority: Any):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        emulator_id = priority.emulator_index

        with self.slot_lock:
            if emulator_id in self.active_slots:
                logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                return

            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å–ª–æ—Ç
            self.active_slots[emulator_id] = EmulatorSlot(
                status='starting',
                start_time=datetime.now(),
                priority=priority
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ ThreadPoolExecutor
        executor = ThreadPoolExecutor(max_workers=1, thread_name_prefix=f"Emu{emulator_id}")
        future = executor.submit(self._process_single_emulator, priority)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º future –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        with self.slot_lock:
            if emulator_id in self.active_slots:
                self.active_slots[emulator_id].future = future
                self.active_slots[emulator_id].executor = executor

        logger.info(f"üéØ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority})")

    def _process_single_emulator(self, priority: Any) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ workflow:
        –≥–æ—Ç–æ–≤—ã–π ‚Üí –∑–∞–ø—É—Å–∫ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º) ‚Üí –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        """
        emulator_id = priority.emulator_index
        start_time = datetime.now()

        try:
            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            # –≠–¢–ê–ü 1: –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
            self._update_slot_status(emulator_id, 'starting_emulator')

            if not self.orchestrator.ldconsole.is_running(emulator_id):
                logger.info(f"–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                if not self.orchestrator.ldconsole.start_emulator(emulator_id):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä")

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                if not self._wait_emulator_ready_fixed(emulator_id, timeout=120):
                    raise Exception("–≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            # –≠–¢–ê–ü 2: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            self._update_slot_status(emulator_id, 'processing_game')

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å bot_worker.py –¥–ª—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
            game_result = self._process_game_actions(priority)

            # –≠–¢–ê–ü 3: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            self._update_slot_status(emulator_id, 'stopping_emulator')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä
            should_stop = self._should_stop_emulator(priority, game_result)

            if should_stop:
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                self.orchestrator.ldconsole.stop_emulator(emulator_id)
            else:
                logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–º")

            # –≠–¢–ê–ü 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            self.orchestrator.scheduler.update_emulator_schedule(emulator_id, priority)

            processing_time = (datetime.now() - start_time).total_seconds()

            result = {
                'status': 'success',
                'emulator_id': emulator_id,
                'processing_time': processing_time,
                'actions_completed': game_result.get('actions_completed', 0),
                'buildings_started': game_result.get('buildings_started', 0),
                'research_started': game_result.get('research_started', 0),
                'stopped_emulator': should_stop
            }

            logger.success(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞ {processing_time:.1f}—Å")
            return result

        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.orchestrator.ldconsole.stop_emulator(emulator_id)
            except:
                pass

            return {
                'status': 'error',
                'emulator_id': emulator_id,
                'processing_time': processing_time,
                'error': str(e)
            }

    def _wait_emulator_ready_fixed(self, index: int, timeout: float = 120.0) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞

        –ö–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        ‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        ‚úÖ –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ is_running()
        ‚úÖ –§–æ–∫—É—Å –Ω–∞ ADB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏, –∞ –Ω–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        logger.info(f"–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {index} (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        logger.info(f"–î–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä—É {index} –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ (15—Å)...")
        time.sleep(15.0)

        start_time = time.time()
        check_interval = 10.0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        adb_port = self.orchestrator.ldconsole.get_adb_port(index)

        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        not_running_count = 0
        max_not_running = 3  # –†–∞–∑—Ä–µ—à–∞–µ–º 3 –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥

        while time.time() - start_time < timeout:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if not self.orchestrator.ldconsole.is_running(index):
                not_running_count += 1
                if not_running_count >= max_not_running:
                    logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {index} –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ {not_running_count} –ø—Ä–æ–≤–µ—Ä–æ–∫")
                    return False
                else:
                    logger.debug(f"–≠–º—É–ª—è—Ç–æ—Ä {index} –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {not_running_count}/{max_not_running})")
            else:
                # –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                not_running_count = 0

            # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.orchestrator.ldconsole.test_adb_connection(adb_port):
                elapsed = time.time() - start_time
                logger.success(f"–≠–º—É–ª—è—Ç–æ—Ä {index} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ {elapsed:.1f}—Å")
                return True

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            elapsed = time.time() - start_time
            logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {index} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ—à–ª–æ {elapsed:.1f}—Å...")

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            time.sleep(check_interval)

        logger.error(f"–≠–º—É–ª—è—Ç–æ—Ä {index} –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ {timeout}—Å –æ–∂–∏–¥–∞–Ω–∏—è")
        return False

    def _sync_emulators_to_database(self):
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –∏–∑ EmulatorDiscovery –≤ Database
        –ë–µ–∑ —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –≤–∏–¥–∏—Ç —ç–º—É–ª—è—Ç–æ—Ä—ã!
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∏–∑ EmulatorDiscovery
            discovery_emulators = self.orchestrator.discovery.get_emulators()

            if not discovery_emulators:
                logger.debug("–ù–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–º—É–ª—è—Ç–æ—Ä –≤ –ë–î
            for emu_index, emu_info in discovery_emulators.items():
                try:
                    from utils.database import database
                    database.sync_emulator(
                        emulator_index=emu_index,
                        emulator_name=emu_info.name,
                        enabled=emu_info.enabled,
                        notes=emu_info.notes
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emu_index}: {e}")

            logger.debug(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(discovery_emulators)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –ë–î")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")

    def _process_game_actions(self, priority: Any) -> Dict[str, Any]:
        """
        –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
        –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å bot_worker.py –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö.
        """
        emulator_id = priority.emulator_index

        # –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"[–ó–ê–ì–õ–£–®–ö–ê] –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        time.sleep(5)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return {
            'actions_completed': 3,
            'buildings_started': 1,
            'research_started': 1,
            'status': 'completed'
        }

    def _should_stop_emulator(self, priority: Any, game_result: Dict[str, Any]) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        –õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:
        - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ > 4 —á–∞—Å–æ–≤
        - –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –µ—Å–ª–∏ < 1 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        emulator_id = priority.emulator_index

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        next_check_time = self.orchestrator.scheduler.calculate_next_check_time(emulator_id)

        if next_check_time:
            time_until_next = (next_check_time - datetime.now()).total_seconds() / 3600

            if time_until_next > 4.0:
                logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ {time_until_next:.1f}—á - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")
                return True
            elif time_until_next < 1.0:
                logger.info(
                    f"–°–ª–µ–¥—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ {time_until_next:.1f}—á - –æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–ø—É—â–µ–Ω–Ω—ã–º")
                return False
            else:
                logger.info(
                    f"–°–ª–µ–¥—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ {time_until_next:.1f}—á - –æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–ø—É—â–µ–Ω–Ω—ã–º")
                return False
        else:
            # –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            logger.info(f"–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º")
            return False


class Orchestrator:
    """
    üöÄ –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô –û–†–ö–ï–°–¢–†–ê–¢–û–†

    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
    - SmartLDConsole –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏
    - SmartScheduler –¥–ª—è —É–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    - DynamicEmulatorProcessor –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –ë–ï–ó –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    """

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ Orchestrator")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.discovery = EmulatorDiscovery()
        self.ldconsole = SmartLDConsole(self.discovery.ldconsole_path)
        self.prime_time_manager = PrimeTimeManager()
        self.scheduler = get_scheduler()

        # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processor = DynamicEmulatorProcessor(self, max_concurrent=5)

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Orchestrator")
        logger.info("  ‚úÖ SmartLDConsole –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ SmartScheduler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        logger.info("  ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –∑–¥–∞–Ω–∏—è –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        logger.remove()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        logger.add(
            sys.stdout,
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
            level="INFO"
        )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path("data/logs")
        logs_dir.mkdir(parents=True, exist_ok=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logger.add(
            logs_dir / "orchestrator.log",
            rotation="1 day",
            retention="7 days",
            level="DEBUG",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
orchestrator = None


def get_orchestrator() -> Orchestrator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global orchestrator
    if orchestrator is None:
        orchestrator = Orchestrator()
    return orchestrator


@click.group()
@click.version_option(version='2.5.0')
def cli():
    """Beast Lord Bot - –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    pass


# === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –≠–ú–£–õ–Ø–¢–û–†–ê–ú–ò ===

@cli.command()
def scan():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ LDPlayer"""
    logger.info("=== –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===")
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    orchestrator.discovery.load_config()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if orchestrator.discovery.rescan_with_user_settings():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = orchestrator.discovery.get_status_summary()

        logger.success("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
        logger.info(f"–í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
        logger.info(f"–í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

        if summary['ldconsole_found']:
            logger.info(f"LDConsole: {summary['ldconsole_path']}")
        else:
            logger.warning("LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        _show_emulators_list(detailed=False)

    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        sys.exit(1)


@cli.command()
@click.option('--enabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--disabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--detailed', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def list(enabled_only: bool, disabled_only: bool, detailed: bool):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –°–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===")

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_orchestrator()
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    _show_emulators_list(enabled_only, disabled_only, detailed)


@cli.command()
@click.option('--id', 'emulator_ids', multiple=True, type=int, required=True,
              help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
def enable(emulator_ids: List[int]):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞(–æ–≤)"""
    emulator_ids = tuple(emulator_ids)
    logger.info(f"=== –í–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulator_ids} ===")

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_orchestrator()
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    success_count = 0
    for emu_id in emulator_ids:
        if orchestrator.discovery.enable_emulator(emu_id):
            success_count += 1
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emu_id}")

    if success_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–í–∫–ª—é—á–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {success_count}/{len(emulator_ids)}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_ids', multiple=True, type=int, required=True,
              help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
def disable(emulator_ids: List[int]):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞(–æ–≤)"""
    emulator_ids = tuple(emulator_ids)
    logger.info(f"=== –í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulator_ids} ===")

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_orchestrator()
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    success_count = 0
    for emu_id in emulator_ids:
        if orchestrator.discovery.disable_emulator(emu_id):
            success_count += 1
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emu_id}")

    if success_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–í—ã–∫–ª—é—á–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {success_count}/{len(emulator_ids)}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_id', type=int, required=True, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--text', 'notes_text', required=True, help='–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏')
def note(emulator_id: int, notes_text: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    logger.info(f"=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} ===")

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_orchestrator()
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    if orchestrator.discovery.update_notes(emulator_id, notes_text):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
        sys.exit(1)


# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===

@cli.command('start-processing')
@click.option('--max-concurrent', default=5, help='–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
def start_processing(max_concurrent: int):
    """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info(f"=== –ó–ê–ü–£–°–ö –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò (–º–∞–∫—Å {max_concurrent}) ===")
    orchestrator = get_orchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    enabled = orchestrator.discovery.get_enabled_emulators()
    if not enabled:
        logger.error("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤. –í–∫–ª—é—á–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π 'enable'")
        sys.exit(1)

    logger.info(f"–í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(enabled)}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    orchestrator.processor.max_concurrent = max_concurrent

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if orchestrator.processor.start_processing():
        logger.success("üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É 'stop-processing'")

        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while orchestrator.processor.running:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            orchestrator.processor.stop_processing()
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        sys.exit(1)


@cli.command('stop-processing')
def stop_processing():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –û–°–¢–ê–ù–û–í–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===")
    orchestrator = get_orchestrator()

    if orchestrator.processor.stop_processing():
        logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")


@cli.command()
@click.option('--detailed', is_flag=True, help='–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def status(detailed: bool):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ===")
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.warning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'scan' –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö
    summary = orchestrator.discovery.get_status_summary()
    logger.info(f"üìä –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
    logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
    logger.info(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

    if summary['ldconsole_found']:
        logger.info(f"üîß LDConsole: {summary['ldconsole_path']}")
    else:
        logger.warning("‚ö†Ô∏è  LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°—Ç–∞—Ç—É—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processor_status = orchestrator.processor.get_status()
    logger.info(f"\nüîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:")
    logger.info(f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ó–∞–ø—É—â–µ–Ω–∞' if processor_status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['active_slots']}/{processor_status['max_concurrent']}")
    logger.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['free_slots']}")

    if processor_status['active_emulators']:
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã: {processor_status['active_emulators']}")

    # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if detailed:
        try:
            schedule_summary = orchestrator.scheduler.get_schedule_summary()
            logger.info(f"\nüìÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö:")
            logger.info(f"–ì–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å: {schedule_summary['ready_now']}")
            logger.info(f"–ñ–¥—É—Ç –≤—Ä–µ–º–µ–Ω–∏: {schedule_summary['waiting_for_time']}")
            logger.info(f"–ñ–¥—É—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º: {schedule_summary['waiting_for_prime_time']}")

            if schedule_summary['next_ready_time']:
                logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –≥–æ—Ç–æ–≤: {schedule_summary['next_ready_time']}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    if summary['enabled'] > 0:
        logger.info(f"\n‚úÖ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –≠–ú–£–õ–Ø–¢–û–†–´:")
        enabled = orchestrator.discovery.get_enabled_emulators()
        for idx, emu in enabled.items():
            running_status = "üü¢" if orchestrator.ldconsole.is_running(idx) else "üî¥"
            logger.info(f"  {running_status} ID {idx}: {emu.name} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


@cli.command()
@click.option('--max-concurrent', default=5, help='–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
def queue(max_concurrent: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    logger.info(f"=== –û–ß–ï–†–ï–î–¨ –≠–ú–£–õ–Ø–¢–û–†–û–í (–º–∞–∫—Å {max_concurrent}) ===")
    orchestrator = get_orchestrator()

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    ready_emulators = orchestrator.scheduler.get_ready_emulators_by_priority(max_concurrent)

    if not ready_emulators:
        logger.info("–ù–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return

    logger.info(f"–ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(ready_emulators)}")

    for i, priority in enumerate(ready_emulators, 1):
        logger.info(f"\n{i}. –≠–º—É–ª—è—Ç–æ—Ä {priority.emulator_index}: {priority.emulator_name}")
        logger.info(f"   –õ–æ—Ä–¥ {priority.lord_level} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.total_priority}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        logger.info("   –§–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:")
        for factor, value in priority.priority_factors.items():
            if value > 0:
                logger.info(f"     - {factor}: +{value}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if priority.recommended_actions:
            logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(priority.recommended_actions[:3])}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–π–º-—Ç–∞–π–º–µ
        if priority.waiting_for_prime_time and priority.next_prime_time_window:
            wait_time = (priority.next_prime_time_window - datetime.now()).total_seconds() / 3600
            logger.info(f"   üïê –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º —á–µ—Ä–µ–∑ {wait_time:.1f}—á")


@cli.command()
def debug():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
    logger.info("=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
    orchestrator = get_orchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º EmulatorDiscovery
    if not orchestrator.discovery.load_config():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é EmulatorDiscovery")
        return

    discovery_emulators = orchestrator.discovery.get_enabled_emulators()
    logger.info(f"üìÅ EmulatorDiscovery: {len(discovery_emulators)} –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
    for idx, emu in discovery_emulators.items():
        logger.info(f"   ID {idx}: {emu.name} (–≤–∫–ª—é—á–µ–Ω: {emu.enabled})")

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –≤ –ë–î
    logger.info("\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    try:
        for emu_index, emu_info in orchestrator.discovery.get_emulators().items():
            from utils.database import database
            database.sync_emulator(
                emulator_index=emu_index,
                emulator_name=emu_info.name,
                enabled=emu_info.enabled,
                notes=emu_info.notes
            )
        logger.success("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Database
    try:
        from utils.database import database
        db_emulators = database.get_all_emulators(enabled_only=True)
        logger.info(f"\nüíæ Database: {len(db_emulators)} –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        for emu in db_emulators:
            logger.info(f"   ID {emu['emulator_index']}: {emu['emulator_name']} (–≤–∫–ª—é—á–µ–Ω: {emu['enabled']})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Scheduler
    try:
        ready_emulators = orchestrator.scheduler.get_ready_emulators_by_priority(5)
        logger.info(f"\nüéØ Scheduler: {len(ready_emulators)} –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        for i, priority in enumerate(ready_emulators, 1):
            logger.info(f"   {i}. –≠–º—É–ª—è—Ç–æ—Ä {priority.emulator_index}: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return

    logger.success("\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ 0 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")


def _show_emulators_list(enabled_only: bool = False, disabled_only: bool = False, detailed: bool = False):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

    Args:
        enabled_only: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
        disabled_only: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ
        detailed: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    orchestrator = get_orchestrator()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if enabled_only:
        emulators = orchestrator.discovery.get_enabled_emulators()
        title = "–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"
    elif disabled_only:
        emulators = orchestrator.discovery.get_disabled_emulators()
        title = "–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"
    else:
        emulators = orchestrator.discovery.get_emulators()
        title = "–í—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"

    if not emulators:
        logger.info(f"{title}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    logger.info(f"{title}:")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
    sorted_emulators = sorted(emulators.items())

    for idx, emu in sorted_emulators:
        status_icon = "‚úÖ" if emu.enabled else "‚ùå"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ —ç–º—É–ª—è—Ç–æ—Ä
        running_status = ""
        if emu.enabled:
            running_status = " üü¢" if orchestrator.ldconsole.is_running(idx) else " üî¥"

        if detailed:
            logger.info(f"  {status_icon} ID {idx:2d}: {emu.name}{running_status}")
            logger.info(f"      ADB –ø–æ—Ä—Ç: {emu.adb_port}")
            logger.info(f"      –í–∫–ª—é—á–µ–Ω: {'–î–∞' if emu.enabled else '–ù–µ—Ç'}")
            logger.info(f"      –ó–∞–º–µ—Ç–∫–∏: {emu.notes}")
            logger.info("")
        else:
            logger.info(
                f"  {status_icon} ID {idx:2d}: {emu.name:15s}{running_status} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


if __name__ == '__main__':
    try:
        cli()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CLI: {e}")
        sys.exit(1)