"""
–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Orchestrator v2.1
–†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –ë–ï–ó CLI - —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è TUI
–ü–†–û–ú–ü–¢ 19 + –ü–†–û–ú–ü–¢ 20: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–ö–†–ò–¢–ò–ß–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
–ë–ï–ó –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import sys
import time
import threading
from pathlib import Path
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Optional, Any
from dataclasses import dataclass

from loguru import logger
from utils.database import Database
from utils.emulator_discovery import EmulatorDiscovery
from utils.smart_ldconsole import SmartLDConsole
from utils.prime_time_manager import PrimeTimeManager
from scheduler import get_scheduler


# ========== DATACLASSES ==========

@dataclass
class EmulatorSlot:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    status: str  # 'starting_emulator', 'processing_game', 'stopping_emulator', 'completed', 'error'
    start_time: datetime
    priority: object
    future: Optional[object] = None
    executor: Optional[ThreadPoolExecutor] = None
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    buildings_started: int = 0
    research_started: int = 0
    actions_completed: int = 0
    last_activity: Optional[datetime] = None
    errors: List[str] = None

    def __post_init__(self):
        if self.errors is None:
            self.errors = []
        if self.last_activity is None:
            self.last_activity = datetime.now()


@dataclass
class ProcessingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    total_processed: int = 0
    successful_sessions: int = 0
    failed_sessions: int = 0
    total_buildings_started: int = 0
    total_research_started: int = 0
    total_actions_completed: int = 0
    average_processing_time: float = 0.0
    last_reset: datetime = None

    def __post_init__(self):
        if self.last_reset is None:
            self.last_reset = datetime.now()


# ========== DYNAMIC PROCESSOR ==========

class DynamicEmulatorProcessor:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ - –ü–†–û–ú–ü–¢ 20

    –§—É–Ω–∫—Ü–∏–∏:
    - –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """

    def __init__(self, orchestrator, max_concurrent: int = 5):
        self.orchestrator = orchestrator
        self.max_concurrent = max_concurrent
        self.running = False
        self.active_slots: Dict[int, EmulatorSlot] = {}
        self.slot_lock = threading.Lock()
        self.processor_thread = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.stats = ProcessingStats()
        self.stats_lock = threading.Lock()

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω DynamicEmulatorProcessor —Å {max_concurrent} —Å–ª–æ—Ç–∞–º–∏ + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

    def start_processing(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        if self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        logger.info("=== –ù–ê–ß–ê–õ–û –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –≠–ú–£–õ–Ø–¢–û–†–û–í ===")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        self._sync_emulators_to_database()

        self.running = True
        self.processor_thread = threading.Thread(
            target=self._processing_loop,
            name="EmulatorProcessor",
            daemon=True
        )
        self.processor_thread.start()

        logger.success(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ (–º–∞–∫—Å {self.max_concurrent})")
        return True

    def stop_processing(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        self.running = False

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        with self.slot_lock:
            active_futures = []
            for emulator_id, slot in self.active_slots.items():
                if slot.future and not slot.future.done():
                    logger.info(f"–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
                    active_futures.append((emulator_id, slot.future))

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        for emulator_id, future in active_futures:
            try:
                future.result(timeout=30.0)
            except Exception as e:
                logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        if self.processor_thread and self.processor_thread.is_alive():
            self.processor_thread.join(timeout=5.0)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã
        with self.slot_lock:
            self.active_slots.clear()

        logger.success("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        with self.slot_lock:
            active_count = len(self.active_slots)
            active_emulators = list(self.active_slots.keys())

        with self.stats_lock:
            stats_dict = {
                'total_processed': self.stats.total_processed,
                'successful_sessions': self.stats.successful_sessions,
                'failed_sessions': self.stats.failed_sessions,
                'total_buildings_started': self.stats.total_buildings_started,
                'total_research_started': self.stats.total_research_started,
                'total_actions_completed': self.stats.total_actions_completed,
                'average_processing_time': self.stats.average_processing_time
            }

        return {
            'running': self.running,
            'active_slots': active_count,
            'max_concurrent': self.max_concurrent,
            'active_emulators': active_emulators,
            'total_stats': stats_dict
        }

    def get_detailed_active_emulators(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö"""
        detailed_info = []

        with self.slot_lock:
            for emulator_id, slot in self.active_slots.items():
                elapsed = (datetime.now() - slot.start_time).total_seconds()

                info = {
                    'emulator_id': emulator_id,
                    'status': slot.status,
                    'elapsed_time': elapsed,
                    'buildings_started': slot.buildings_started,
                    'research_started': slot.research_started,
                    'actions_completed': slot.actions_completed,
                    'last_activity': slot.last_activity.isoformat() if slot.last_activity else None,
                    'errors': slot.errors
                }
                detailed_info.append(info)

        return detailed_info

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.stats_lock:
            self.stats = ProcessingStats()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞")

    def _processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                with self.slot_lock:
                    free_slots = self.max_concurrent - len(self.active_slots)

                if free_slots > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    ready_emulators = self.orchestrator.scheduler.get_ready_emulators_by_priority(
                        max_count=free_slots
                    )

                    for priority in ready_emulators:
                        if not self.running:
                            break

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–º—É–ª—è—Ç–æ—Ä –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                        with self.slot_lock:
                            if priority.emulator_index in self.active_slots:
                                continue

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º—É–ª—è—Ç–æ—Ä–∞
                        self._start_emulator_processing(priority)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                self._check_completed_slots()

                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                time.sleep(2.0)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                time.sleep(5.0)

        logger.info("üõë –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _start_emulator_processing(self, priority):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        emulator_id = priority.emulator_index

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.total_priority})")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç
        slot = EmulatorSlot(
            status='starting_emulator',
            start_time=datetime.now(),
            priority=priority
        )

        # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        slot.executor = ThreadPoolExecutor(max_workers=1, thread_name_prefix=f"Emu{emulator_id}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        slot.future = slot.executor.submit(self._process_single_emulator, emulator_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç
        with self.slot_lock:
            self.active_slots[emulator_id] = slot

    def _check_completed_slots(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        completed_slots = []

        with self.slot_lock:
            for emulator_id, slot in list(self.active_slots.items()):
                if slot.future and slot.future.done():
                    completed_slots.append(emulator_id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        for emulator_id in completed_slots:
            self._handle_completed_slot(emulator_id)

    def _handle_completed_slot(self, emulator_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        with self.slot_lock:
            slot = self.active_slots.get(emulator_id)
            if not slot:
                return

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = slot.future.result(timeout=1.0)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats_for_completed_slot(slot, result)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
                if slot.executor:
                    slot.executor.shutdown(wait=False)

                logger.info(f"‚úÖ –°–ª–æ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ {emulator_id}: {e}")

            finally:
                # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
                self.active_slots.pop(emulator_id, None)

    def _update_stats_for_completed_slot(self, slot: EmulatorSlot, result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        with self.stats_lock:
            self.stats.total_processed += 1

            if result.get('status') == 'success':
                self.stats.successful_sessions += 1
                self.stats.total_buildings_started += result.get('buildings_started', 0)
                self.stats.total_research_started += result.get('research_started', 0)
                self.stats.total_actions_completed += result.get('actions_completed', 0)
            else:
                self.stats.failed_sessions += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = result.get('processing_time', 0)
            if self.stats.total_processed > 1:
                self.stats.average_processing_time = (
                    (self.stats.average_processing_time * (self.stats.total_processed - 1) + processing_time)
                    / self.stats.total_processed
                )
            else:
                self.stats.average_processing_time = processing_time

    def _process_single_emulator(self, emulator_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        start_time = datetime.now()

        try:
            # 1. –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞
            self._update_slot_status(emulator_id, 'starting_emulator')
            logger.info(f"üîß –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            if not self.orchestrator.ldconsole.start_emulator(emulator_id, wait_ready=False):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")

            # 2. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB
            if not self._wait_for_adb_ready(emulator_id, max_wait=90):
                raise Exception(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è)
            self._update_slot_status(emulator_id, 'processing_game')
            logger.info(f"üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            processing_result = self._simulate_parallel_game_processing(emulator_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–ª–æ—Ç–µ
            with self.slot_lock:
                if emulator_id in self.active_slots:
                    slot = self.active_slots[emulator_id]
                    slot.buildings_started = processing_result.get('buildings_started', 0)
                    slot.research_started = processing_result.get('research_started', 0)
                    slot.actions_completed = processing_result.get('actions_completed', 0)
                    slot.last_activity = datetime.now()

            # 4. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
            self._update_slot_status(emulator_id, 'stopping_emulator')
            logger.info(f"‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            if self.orchestrator.ldconsole.stop_emulator(emulator_id):
                logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            processing_time = (datetime.now() - start_time).total_seconds()
            result = {
                'status': 'success',
                'processing_time': processing_time,
                'buildings_started': processing_result.get('buildings_started', 0),
                'research_started': processing_result.get('research_started', 0),
                'actions_completed': processing_result.get('actions_completed', 0)
            }

            logger.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å")
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}"
            logger.error(error_msg)
            self._update_slot_status(emulator_id, 'error', error=error_msg)

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.orchestrator.ldconsole.stop_emulator(emulator_id)
            except:
                pass

            return {
                'status': 'error',
                'error': error_msg,
                'processing_time': (datetime.now() - start_time).total_seconds()
            }

    def _update_slot_status(self, emulator_id: int, status: str, error: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–∞"""
        with self.slot_lock:
            if emulator_id in self.active_slots:
                slot = self.active_slots[emulator_id]
                slot.status = status
                slot.last_activity = datetime.now()
                if error:
                    slot.errors.append(error)

    def _wait_for_adb_ready(self, emulator_id: int, max_wait: int = 90) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB"""
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (–º–∞–∫—Å {max_wait}—Å)")

        start_time = datetime.now()
        last_status_log = start_time

        while (datetime.now() - start_time).total_seconds() < max_wait:
            if (datetime.now() - last_status_log).total_seconds() >= 10:
                elapsed = (datetime.now() - start_time).total_seconds()
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ADB —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} - –ø—Ä–æ—à–ª–æ {elapsed:.0f}—Å")
                last_status_log = datetime.now()

            if self.orchestrator.ldconsole.is_adb_ready(emulator_id):
                total_time = (datetime.now() - start_time).total_seconds()
                logger.success(f"‚úÖ ADB –≥–æ—Ç–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞ {total_time:.1f}—Å")
                return True

            time.sleep(5.0)

        total_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} ({total_time:.1f}—Å)")
        return False

    def _simulate_parallel_game_processing(self, emulator_id: int) -> Dict[str, Any]:
        """–í–†–ï–ú–ï–ù–ù–ê–Ø —Å–∏–º—É–ª—è—Ü–∏—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã (–¥–æ –ø—Ä–æ–º–ø—Ç–∞ 21)"""
        logger.info(f"üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        time.sleep(5.0)

        import random
        return {
            'buildings_started': random.randint(1, 3),
            'research_started': random.randint(0, 1),
            'actions_completed': random.randint(3, 8)
        }

    def _sync_emulators_to_database(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É Discovery –∏ Database"""
        try:
            emulators = self.orchestrator.discovery.get_emulators()
            for emu_index, emu_info in emulators.items():
                self.orchestrator.database.sync_emulator(
                    emulator_index=emu_index,
                    emulator_name=emu_info.name,
                    enabled=emu_info.enabled,
                    notes=emu_info.notes
                )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")


# ========== ORCHESTRATOR ==========

class Orchestrator:
    """
    –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –ª–æ–≥–∏–∫–æ–π
    –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.1 (TUI)
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Orchestrator —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Orchestrator v2.1 (TUI version)")

        # 0. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.database = Database()

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmulatorDiscovery
        self.discovery = EmulatorDiscovery()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω EmulatorDiscovery, –∫–æ–Ω—Ñ–∏–≥: {self.discovery.config_path}")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartLDConsole
        ldconsole_path = self.discovery.find_ldplayer_path()
        if not ldconsole_path:
            logger.error("ldconsole.exe –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise RuntimeError("LDPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.ldconsole = SmartLDConsole(ldconsole_path)
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω SmartLDConsole —Å –ø—É—Ç–µ–º: {ldconsole_path}")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PrimeTimeManager
        self.prime_time_manager = PrimeTimeManager()

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartScheduler
        self.scheduler = get_scheduler(self.database, self.prime_time_manager)

        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DynamicEmulatorProcessor
        self.processor = DynamicEmulatorProcessor(self, max_concurrent=5)

        logger.info("‚úÖ Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("  ‚úÖ SmartLDConsole –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ SmartScheduler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        logger.info("  ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –∑–¥–∞–Ω–∏—è –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    # ========== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –≠–ú–£–õ–Ø–¢–û–†–ê–ú–ò ==========

    def scan_emulators(self) -> bool:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ LDPlayer"""
        logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")

        if self.discovery.scan_emulators():
            if self.discovery.save_config():
                logger.success("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
            return False

    def get_emulators_list(self, enabled_only: bool = False,
                          disabled_only: bool = False) -> Dict[int, any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

        Args:
            enabled_only: –¢–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
            disabled_only: –¢–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ

        Returns:
            –°–ª–æ–≤–∞—Ä—å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        """
        if enabled_only:
            return self.discovery.get_enabled_emulators()
        elif disabled_only:
            return self.discovery.get_disabled_emulators()
        else:
            return self.discovery.get_emulators()

    def enable_emulator(self, emulator_id: int) -> bool:
        """–í–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä"""
        if not self.discovery.load_config():
            logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ scan")
            return False

        if self.discovery.enable_emulator(emulator_id):
            self.discovery.save_config()
            logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –≤–∫–ª—é—á–µ–Ω")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")
            return False

    def disable_emulator(self, emulator_id: int) -> bool:
        """–í—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä"""
        if not self.discovery.load_config():
            logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ scan")
            return False

        if self.discovery.disable_emulator(emulator_id):
            self.discovery.save_config()
            logger.success(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –≤—ã–∫–ª—é—á–µ–Ω")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emulator_id}")
            return False

    def update_emulator_notes(self, emulator_id: int, notes: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        if not self.discovery.load_config():
            logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        if self.discovery.update_notes(emulator_id, notes):
            self.discovery.save_config()
            logger.success(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
            return False

    # ========== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–†–ê–ë–û–¢–ö–û–ô ==========

    def start_processing(self, max_concurrent: int = 5) -> bool:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

        Args:
            max_concurrent: –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∞–∫—Å {max_concurrent})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.discovery.load_config():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        enabled = self.discovery.get_enabled_emulators()
        if not enabled:
            logger.error("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
            return False

        logger.info(f"–í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(enabled)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.processor.max_concurrent = max_concurrent

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if self.processor.start_processing():
            logger.success("üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
            return True
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return False

    def stop_processing(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        if self.processor.stop_processing():
            logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        else:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

    def get_processing_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.discovery.load_config():
            return {
                'error': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                'configured': False
            }

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö
        all_emulators = self.discovery.get_emulators()
        enabled_emulators = self.discovery.get_enabled_emulators()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor_status = self.processor.get_status()

        return {
            'configured': True,
            'total_emulators': len(all_emulators),
            'enabled_emulators': len(enabled_emulators),
            'processor_running': processor_status['running'],
            'active_slots': processor_status['active_slots'],
            'max_concurrent': processor_status['max_concurrent'],
            'total_processed': processor_status['total_stats']['total_processed'],
            'total_errors': processor_status['total_stats']['failed_sessions'],
            'emulators_list': all_emulators
        }

    def get_queue_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            priorities = self.scheduler.calculate_priorities()

            return {
                'queue_size': len(priorities),
                'priorities': priorities[:10]  # –¢–æ–ø-10
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return {
                'error': str(e),
                'queue_size': 0,
                'priorities': []
            }


# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ORCHESTRATOR ==========

_orchestrator_instance = None


def get_orchestrator() -> Orchestrator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Orchestrator (–ø–∞—Ç—Ç–µ—Ä–Ω Singleton)"""
    global _orchestrator_instance

    if _orchestrator_instance is None:
        _orchestrator_instance = Orchestrator()

    return _orchestrator_instance