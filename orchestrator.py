"""
–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ Beast Lord Bot.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.

–ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–π —ç–º—É–ª—è—Ç–æ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SmartLDConsole –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
- Workflow: –≥–æ—Ç–æ–≤—ã–µ ‚Üí –∑–∞–ø—É—Å–∫ ‚Üí –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
- –ú–∞–∫—Å–∏–º—É–º 5-8 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
- –ë–ï–ó –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import sys
import time
import threading
from pathlib import Path
from typing import List, Dict, Set
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed

import click
from loguru import logger
from utils.emulator_discovery import EmulatorDiscovery
from utils.smart_ldconsole import SmartLDConsole
from scheduler import SmartScheduler, get_scheduler
from utils.prime_time_manager import PrimeTimeManager
from utils.database import database


class DynamicEmulatorProcessor:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —ç–º—É–ª—è—Ç–æ—Ä–æ–≤.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å —É–º–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ—Ç–∞–º–∏.
    """

    def __init__(self, orchestrator: 'Orchestrator', max_concurrent: int = 5):
        self.orchestrator = orchestrator
        self.max_concurrent = max_concurrent
        self.running = False
        self.processing_thread = None

        # –°–ª–æ—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        self.active_slots: Dict[int, dict] = {}  # {emulator_id: slot_info}
        self.slot_lock = threading.Lock()

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω DynamicEmulatorProcessor —Å {max_concurrent} —Å–ª–æ—Ç–∞–º–∏")

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        if self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False

        self.running = True
        self.processing_thread = threading.Thread(
            target=self._processing_loop,
            name="EmulatorProcessor",
            daemon=True
        )
        self.processing_thread.start()

        logger.success(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ (–º–∞–∫—Å {self.max_concurrent})")
        return True

    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        if not self.running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False

        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")
        self.running = False

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self.processing_thread and self.processing_thread.is_alive():
            self.processing_thread.join(timeout=30)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        self._stop_all_active_emulators()

        logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True

    def _processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("=== –ù–ê–ß–ê–õ–û –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –≠–ú–£–õ–Ø–¢–û–†–û–í ===")

        while self.running:
            try:
                # 1. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                self._cleanup_completed_slots()

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                free_slots = self.max_concurrent - len(self.active_slots)

                if free_slots > 0:
                    # 3. –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    ready_emulators = self.orchestrator.scheduler.get_ready_emulators_by_priority(free_slots)

                    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ready_emulators
                    if ready_emulators:
                        try:
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É
                            emulators_count = len(ready_emulators)
                            logger.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {free_slots}, –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulators_count}")

                            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                            try:
                                for priority in ready_emulators:
                                    if len(self.active_slots) >= self.max_concurrent:
                                        break  # –°–ª–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã

                                    self._start_emulator_processing(priority)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ ready_emulators: {e}")

                        except (TypeError, AttributeError) as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ready_emulators: {type(ready_emulators)}, {e}")
                    else:
                        logger.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {free_slots}, –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: 0")

                # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                if self.active_slots:
                    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(self.active_slots)}/{self.max_concurrent}")
                    for emu_id, slot_info in self.active_slots.items():
                        logger.info(f"  –°–ª–æ—Ç {emu_id}: {slot_info['status']} (—Å {slot_info['start_time']})")

                # 6. –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                time.sleep(60)

    def _start_emulator_processing(self, priority):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        emulator_id = priority.emulator_index

        with self.slot_lock:
            if emulator_id in self.active_slots:
                logger.warning(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                return

            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å–ª–æ—Ç
            self.active_slots[emulator_id] = {
                'status': 'starting',
                'start_time': datetime.now(),
                'priority': priority,
                'future': None
            }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ ThreadPoolExecutor
        executor = ThreadPoolExecutor(max_workers=1, thread_name_prefix=f"Emu{emulator_id}")
        future = executor.submit(self._process_single_emulator, priority)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º future –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        with self.slot_lock:
            if emulator_id in self.active_slots:
                self.active_slots[emulator_id]['future'] = future
                self.active_slots[emulator_id]['executor'] = executor

        logger.info(f"üéØ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.total_priority})")

    def _process_single_emulator(self, priority) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ workflow:
        –≥–æ—Ç–æ–≤—ã–π ‚Üí –∑–∞–ø—É—Å–∫ ‚Üí –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        """
        emulator_id = priority.emulator_index
        start_time = datetime.now()

        try:
            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

            # –≠–¢–ê–ü 1: –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞
            self._update_slot_status(emulator_id, 'starting_emulator')

            if not self.orchestrator.ldconsole.is_running(emulator_id):
                logger.info(f"–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                if not self.orchestrator.ldconsole.start_emulator(emulator_id):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä")

                # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ADB –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                if not self.orchestrator.ldconsole.wait_emulator_ready(emulator_id, timeout=120):
                    raise Exception("–≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            # –≠–¢–ê–ü 2: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            self._update_slot_status(emulator_id, 'processing_game')

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å bot_worker.py –¥–ª—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –∑–¥–∞–Ω–∏–π –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
            game_result = self._process_game_actions(priority)

            # –≠–¢–ê–ü 3: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            self._update_slot_status(emulator_id, 'stopping_emulator')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä
            should_stop = self._should_stop_emulator(priority, game_result)

            if should_stop:
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")
                self.orchestrator.ldconsole.stop_emulator(emulator_id)
            else:
                logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–º")

            # –≠–¢–ê–ü 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            self.orchestrator.scheduler.update_emulator_schedule(emulator_id, priority)

            processing_time = (datetime.now() - start_time).total_seconds()

            result = {
                'status': 'success',
                'emulator_id': emulator_id,
                'processing_time': processing_time,
                'actions_completed': game_result.get('actions_completed', 0),
                'buildings_started': game_result.get('buildings_started', 0),
                'research_started': game_result.get('research_started', 0),
                'stopped_emulator': should_stop
            }

            logger.success(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –∑–∞ {processing_time:.1f}—Å")
            return result

        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.orchestrator.ldconsole.stop_emulator(emulator_id)
            except:
                pass

            return {
                'status': 'error',
                'emulator_id': emulator_id,
                'processing_time': processing_time,
                'error': str(e)
            }

    def _process_game_actions(self, priority) -> dict:
        """
        –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
        –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å bot_worker.py –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö.
        """
        emulator_id = priority.emulator_index

        # –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        logger.info(f"[–ó–ê–ì–õ–£–®–ö–ê] –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ recommended_actions
        recommended_actions = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç –±–µ–∑ isinstance –ø—Ä–æ–≤–µ—Ä–∫–∏
            raw_actions = getattr(priority, 'recommended_actions', None)

            if raw_actions is None:
                recommended_actions = []
            else:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫ —Å–ø–∏—Å–∫—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                try:
                    # –ü—Ä–æ–±—É–µ–º –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å–ø–∏—Å–∫–æ–≤, –∫–æ—Ä—Ç–µ–∂–µ–π)
                    recommended_actions = list(raw_actions)
                except (TypeError, ValueError):
                    # –ï—Å–ª–∏ –Ω–µ –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    try:
                        recommended_actions = [str(raw_actions)]
                    except:
                        recommended_actions = []

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ recommended_actions: {e}")
            recommended_actions = []

        logger.info(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {recommended_actions}")
        logger.info(f"  –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∞–π–º-—Ç–∞–π–º–∞: {getattr(priority, 'waiting_for_prime_time', False)}")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        time.sleep(2)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        actions_str = ''
        if recommended_actions:
            try:
                actions_str = ' '.join(str(action) for action in recommended_actions)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
                actions_str = ''

        return {
            'actions_completed': len(recommended_actions) if recommended_actions else 0,
            'buildings_started': 1 if 'building' in actions_str else 0,
            'research_started': 1 if 'research' in actions_str else 0
        }

    def _should_stop_emulator(self, priority, game_result) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏:
        # 1. –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        # 2. –≠–º—É–ª—è—Ç–æ—Ä –∂–¥–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (>4 —á–∞—Å–∞)
        # 3. –ù–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞

        actions_completed = game_result.get('actions_completed', 0)

        if actions_completed == 0:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {priority.emulator_index}: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π")
            return True

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–µ—Ç –ª–∏ priority –∞—Ç—Ä–∏–±—É—Ç emulator_id
            emulator_id = getattr(priority, 'emulator_id', None)
            if emulator_id is None:
                emulator_id = getattr(priority, 'emulator_index', 1)

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ scheduler
            if hasattr(self.orchestrator.scheduler, 'calculate_next_check_time'):
                next_check = self.orchestrator.scheduler.calculate_next_check_time(emulator_id)

                if next_check and isinstance(next_check, datetime):
                    hours_until_next = (next_check - datetime.now()).total_seconds() / 3600

                    if hours_until_next > 2:
                        logger.info(
                            f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ {priority.emulator_index}: —Å–ª–µ–¥—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ {hours_until_next:.1f}—á")
                        return True
            else:
                logger.warning("–ú–µ—Ç–æ–¥ calculate_next_check_time –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ scheduler")

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

        return False

    def _update_slot_status(self, emulator_id: int, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–∞"""
        with self.slot_lock:
            if emulator_id in self.active_slots:
                self.active_slots[emulator_id]['status'] = status

    def _cleanup_completed_slots(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        with self.slot_lock:
            completed_slots = []

            for emulator_id, slot_info in self.active_slots.items():
                future = slot_info.get('future')

                if future and future.done():
                    completed_slots.append(emulator_id)

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    try:
                        result = future.result()
                        logger.info(f"–°–ª–æ—Ç {emulator_id} –∑–∞–≤–µ—Ä—à–µ–Ω: {result['status']}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç–µ {emulator_id}: {e}")

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
                    executor = slot_info.get('executor')
                    if executor:
                        executor.shutdown(wait=False)

            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            for emulator_id in completed_slots:
                del self.active_slots[emulator_id]

    def _stop_all_active_emulators(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

        with self.slot_lock:
            for emulator_id, slot_info in self.active_slots.items():
                try:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
                    self.orchestrator.ldconsole.stop_emulator(emulator_id)

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
                    executor = slot_info.get('executor')
                    if executor:
                        executor.shutdown(wait=True)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")

            self.active_slots.clear()

    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        with self.slot_lock:
            active_emulators = []
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π
                if self.active_slots and isinstance(self.active_slots, dict):
                    active_emulators = list(self.active_slots.keys())
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")
                active_emulators = []

            return {
                'running': self.running,
                'max_concurrent': self.max_concurrent,
                'active_slots': len(self.active_slots) if self.active_slots else 0,
                'free_slots': max(0, self.max_concurrent - (len(self.active_slots) if self.active_slots else 0)),
                'active_emulators': active_emulators
            }


class Orchestrator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.discovery = EmulatorDiscovery()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ ldconsole
        self.discovery.load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SmartLDConsole —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
        ldconsole_path = None
        if self.discovery.ldconsole_path:
            ldconsole_path = self.discovery.ldconsole_path

        self.ldconsole = SmartLDConsole(ldconsole_path)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø—Ä–∞–π–º-—Ç–∞–π–º–∞–º–∏
        self.scheduler = get_scheduler(database)
        self.prime_time_manager = PrimeTimeManager()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.processor = DynamicEmulatorProcessor(self)

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Orchestrator")
        logger.info("  ‚úÖ SmartLDConsole –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ SmartScheduler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("  ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        logger.info("  ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –∑–¥–∞–Ω–∏—è –ò –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        logger.remove()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        logger.add(
            sys.stdout,
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
            level="INFO"
        )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path("data/logs")
        logs_dir.mkdir(parents=True, exist_ok=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logger.add(
            logs_dir / "orchestrator.log",
            rotation="1 day",
            retention="7 days",
            level="DEBUG",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
orchestrator = None


def get_orchestrator() -> Orchestrator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global orchestrator
    if orchestrator is None:
        orchestrator = Orchestrator()
    return orchestrator


@click.group()
@click.version_option(version='2.5.0')
def cli():
    """Beast Lord Bot - –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    pass


# === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –≠–ú–£–õ–Ø–¢–û–†–ê–ú–ò ===

@cli.command()
def scan():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ LDPlayer"""
    logger.info("=== –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===")
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    orchestrator.discovery.load_config()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if orchestrator.discovery.rescan_with_user_settings():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = orchestrator.discovery.get_status_summary()

        logger.success("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
        logger.info(f"–í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
        logger.info(f"–í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

        if summary['ldconsole_found']:
            logger.info(f"LDConsole: {summary['ldconsole_path']}")
        else:
            logger.warning("LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        _show_emulators_list(detailed=False)

    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        sys.exit(1)


@cli.command()
@click.option('--enabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--disabled-only', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã')
@click.option('--detailed', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def list(enabled_only: bool, disabled_only: bool, detailed: bool):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –°–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    _show_emulators_list(enabled_only, disabled_only, detailed)


@cli.command()
@click.option('--id', 'emulator_ids', multiple=True, type=int, required=True,
              help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
def enable(emulator_ids: List[int]):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞(–æ–≤)"""
    emulator_ids = tuple(emulator_ids)
    logger.info(f"=== –í–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulator_ids} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    success_count = 0
    for emu_id in emulator_ids:
        if orchestrator.discovery.enable_emulator(emu_id):
            success_count += 1
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emu_id}")

    if success_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–í–∫–ª—é—á–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {success_count}/{len(emulator_ids)}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_ids', multiple=True, type=int, required=True,
              help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
def disable(emulator_ids: List[int]):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞(–æ–≤)"""
    emulator_ids = tuple(emulator_ids)
    logger.info(f"=== –í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {emulator_ids} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    success_count = 0
    for emu_id in emulator_ids:
        if orchestrator.discovery.disable_emulator(emu_id):
            success_count += 1
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä {emu_id}")

    if success_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–í—ã–∫–ª—é—á–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {success_count}/{len(emulator_ids)}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        sys.exit(1)


@cli.command()
@click.option('--id', 'emulator_id', type=int, required=True, help='ID —ç–º—É–ª—è—Ç–æ—Ä–∞')
@click.option('--text', 'notes_text', required=True, help='–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏')
def note(emulator_id: int, notes_text: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    logger.info(f"=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    if orchestrator.discovery.update_notes(emulator_id, notes_text):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        orchestrator.discovery.save_config()
        logger.success(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")
        sys.exit(1)


# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===

@cli.command('start-processing')
@click.option('--max-concurrent', default=5, help='–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
def start_processing(max_concurrent: int):
    """–ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info(f"=== –ó–ê–ü–£–°–ö –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò (–º–∞–∫—Å {max_concurrent}) ===")
    orchestrator = get_orchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ 'scan'")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    enabled = orchestrator.discovery.get_enabled_emulators()
    if not enabled:
        logger.error("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤. –í–∫–ª—é—á–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π 'enable'")
        sys.exit(1)

    logger.info(f"–í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(enabled)}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    orchestrator.processor.max_concurrent = max_concurrent

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if orchestrator.processor.start_processing():
        logger.success("üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É 'stop-processing'")

        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while orchestrator.processor.running:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            orchestrator.processor.stop_processing()
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        sys.exit(1)


@cli.command('stop-processing')
def stop_processing():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    logger.info("=== –û–°–¢–ê–ù–û–í–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===")
    orchestrator = get_orchestrator()

    if orchestrator.processor.stop_processing():
        logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")


@cli.command()
@click.option('--detailed', is_flag=True, help='–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def status(detailed: bool):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ===")
    orchestrator = get_orchestrator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not orchestrator.discovery.load_config():
        logger.warning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'scan' –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö
    summary = orchestrator.discovery.get_status_summary()
    logger.info(f"üìä –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {summary['total']}")
    logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {summary['enabled']}")
    logger.info(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ: {summary['disabled']}")

    if summary['ldconsole_found']:
        logger.info(f"üîß LDConsole: {summary['ldconsole_path']}")
    else:
        logger.warning("‚ö†Ô∏è  LDConsole –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°—Ç–∞—Ç—É—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processor_status = orchestrator.processor.get_status()
    logger.info(f"\nüîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:")
    logger.info(f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ó–∞–ø—É—â–µ–Ω–∞' if processor_status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['active_slots']}/{processor_status['max_concurrent']}")
    logger.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {processor_status['free_slots']}")

    if processor_status['active_emulators']:
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã: {processor_status['active_emulators']}")

    # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if detailed:
        try:
            schedule_summary = orchestrator.scheduler.get_schedule_summary()
            logger.info(f"\nüìÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö:")
            logger.info(f"–ì–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å: {schedule_summary['ready_now']}")
            logger.info(f"–ñ–¥—É—Ç –≤—Ä–µ–º–µ–Ω–∏: {schedule_summary['waiting_for_time']}")
            logger.info(f"–ñ–¥—É—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º: {schedule_summary['waiting_for_prime_time']}")

            if schedule_summary['next_ready_time']:
                logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –≥–æ—Ç–æ–≤: {schedule_summary['next_ready_time']}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    if summary['enabled'] > 0:
        logger.info(f"\n‚úÖ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –≠–ú–£–õ–Ø–¢–û–†–´:")
        enabled = orchestrator.discovery.get_enabled_emulators()
        for idx, emu in enabled.items():
            running_status = "üü¢" if orchestrator.ldconsole.is_running(idx) else "üî¥"
            logger.info(f"  {running_status} ID {idx}: {emu.name} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


@cli.command()
@click.option('--max-concurrent', default=5, help='–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤')
def queue(max_concurrent: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    logger.info(f"=== –û–ß–ï–†–ï–î–¨ –≠–ú–£–õ–Ø–¢–û–†–û–í (–º–∞–∫—Å {max_concurrent}) ===")
    orchestrator = get_orchestrator()

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    ready_emulators = orchestrator.scheduler.get_ready_emulators_by_priority(max_concurrent)

    if not ready_emulators:
        logger.info("–ù–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return

    logger.info(f"–ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(ready_emulators)}")

    for i, priority in enumerate(ready_emulators, 1):
        logger.info(f"\n{i}. –≠–º—É–ª—è—Ç–æ—Ä {priority.emulator_index}: {priority.emulator_name}")
        logger.info(f"   –õ–æ—Ä–¥ {priority.lord_level} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.total_priority}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        logger.info("   –§–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:")
        for factor, value in priority.priority_factors.items():
            if value > 0:
                logger.info(f"     - {factor}: +{value}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if priority.recommended_actions:
            logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(priority.recommended_actions[:3])}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–π–º-—Ç–∞–π–º–µ
        if priority.waiting_for_prime_time and priority.next_prime_time_window:
            wait_time = (priority.next_prime_time_window - datetime.now()).total_seconds() / 3600
            logger.info(f"   üïê –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∞–π–º-—Ç–∞–π–º —á–µ—Ä–µ–∑ {wait_time:.1f}—á")


def _show_emulators_list(enabled_only: bool = False, disabled_only: bool = False, detailed: bool = False):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

    Args:
        enabled_only: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
        disabled_only: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ
        detailed: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    orchestrator = get_orchestrator()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if enabled_only:
        emulators = orchestrator.discovery.get_enabled_emulators()
        title = "–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"
    elif disabled_only:
        emulators = orchestrator.discovery.get_disabled_emulators()
        title = "–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"
    else:
        emulators = orchestrator.discovery.get_emulators()
        title = "–í—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã"

    if not emulators:
        logger.info(f"{title}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    logger.info(f"{title}:")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
    sorted_emulators = sorted(emulators.items())

    for idx, emu in sorted_emulators:
        status_icon = "‚úÖ" if emu.enabled else "‚ùå"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ —ç–º—É–ª—è—Ç–æ—Ä
        running_status = ""
        if emu.enabled:
            running_status = " üü¢" if orchestrator.ldconsole.is_running(idx) else " üî¥"

        if detailed:
            logger.info(f"  {status_icon} ID {idx:2d}: {emu.name}{running_status}")
            logger.info(f"      ADB –ø–æ—Ä—Ç: {emu.adb_port}")
            logger.info(f"      –í–∫–ª—é—á–µ–Ω: {'–î–∞' if emu.enabled else '–ù–µ—Ç'}")
            logger.info(f"      –ó–∞–º–µ—Ç–∫–∏: {emu.notes}")
            logger.info("")
        else:
            logger.info(f"  {status_icon} ID {idx:2d}: {emu.name:15s}{running_status} (–ø–æ—Ä—Ç {emu.adb_port}) - {emu.notes}")


if __name__ == '__main__':
    try:
        cli()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CLI: {e}")
        sys.exit(1)